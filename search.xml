<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>初学检索——Lucene</title>
    <url>/2020/09/11/Lucene1/</url>
    <content><![CDATA[<h2 id="Lucene的简单增删改查"><a href="#Lucene的简单增删改查" class="headerlink" title="Lucene的简单增删改查"></a>Lucene的简单增删改查</h2><h3 id="pom-xml配置"><a href="#pom-xml配置" class="headerlink" title="pom.xml配置"></a>pom.xml配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line">&lt;!-- lucene核心库 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.lucene&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;lucene-core&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;4.10.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- Lucene的查询解析器 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.lucene&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;lucene-queryparser&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;4.10.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- lucene的默认分词器库 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.lucene&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;lucene-analyzers-common&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;4.10.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- lucene的高亮显示 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.lucene&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;lucene-highlighter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;4.10.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;com.janeluo&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;ikanalyzer&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line">    &lt;version&gt;2012_u6&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">  public static void main(String[] args) throws IOException, ParseException &#123;</span><br><span class="line">//BufferInputStream实现IO流输入数据</span><br><span class="line">      evaluate();</span><br><span class="line">//Query查询</span><br><span class="line">      search();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="evaluate-方法"><a href="#evaluate-方法" class="headerlink" title="evaluate()方法"></a>evaluate()方法</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> public static void evaluate() throws IOException &#123;</span><br><span class="line">//        <span class="keyword">for</span>(Integer n: list)  &#123;</span><br><span class="line">//            <span class="keyword">if</span>(predicate.test(n)) &#123;</span><br><span class="line">//                System.out.println(n + <span class="string">&quot; &quot;</span>);</span><br><span class="line">//            &#125;</span><br><span class="line">//        &#125;</span><br><span class="line"></span><br><span class="line">        // 创建文档的集合</span><br><span class="line">        Collection&lt;Document&gt; docs = new ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        //2 索引目录类,指定索引在硬盘中的位置</span><br><span class="line">        Directory directory = FSDirectory.open(new File(<span class="string">&quot;d:\\indexDir&quot;</span>));</span><br><span class="line">        // 引入IK分词器</span><br><span class="line">        Analyzer analyzer = new IKAnalyzer();</span><br><span class="line">        //4 索引写出工具的配置对象</span><br><span class="line">        IndexWriterConfig conf = new IndexWriterConfig(Version.LATEST, analyzer);</span><br><span class="line"></span><br><span class="line">        // 设置打开方式：OpenMode.APPEND 会在索引库的基础上追加新索引。OpenMode.CREATE会先清空原来数据，再提交新的索引</span><br><span class="line">        conf.setOpenMode(IndexWriterConfig.OpenMode.CREATE);</span><br><span class="line">        //5 创建索引的写出工具类。参数：索引的目录和配置信息</span><br><span class="line">        IndexWriter indexWriter = new IndexWriter(directory, conf);</span><br><span class="line">        FileInputStream fileInputStream=new FileInputStream(<span class="string">&quot;D:\\indexDir\\data\\xiaoshuo.txt&quot;</span>);</span><br><span class="line">        BufferedInputStream bis = new BufferedInputStream(fileInputStream);</span><br><span class="line">        int len;</span><br><span class="line">        int i=1;</span><br><span class="line">        byte[] bs=new byte[1024];</span><br><span class="line">        long begin=System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>((len=bis.read(bs))!=-1)&#123;</span><br><span class="line">            //1 创建文档对象</span><br><span class="line">            Document document = new Document();</span><br><span class="line">            StringBuffer stringBuffer=new StringBuffer();</span><br><span class="line">            stringBuffer.append(new String(bs,0,len));</span><br><span class="line">            // 创建并添加字段信息。参数：字段的名称、字段的值、是否存储，这里选Store.YES代表存储到文档列表。Store.NO代表不存储</span><br><span class="line">            document.add(new StringField(<span class="string">&quot;id&quot;</span>, String.valueOf(i++), Field.Store.YES));</span><br><span class="line">            // 这里我们title字段需要用TextField，即创建索引又会被分词。StringField会创建索引，但是不会被分词</span><br><span class="line">            document.add(new TextField(<span class="string">&quot;title&quot;</span>, stringBuffer.toString(), Field.Store.YES));</span><br><span class="line">            docs.add(document);</span><br><span class="line">            stringBuffer=null;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(System.currentTimeMillis()-begin);</span><br><span class="line"></span><br><span class="line">        fileInputStream.close();</span><br><span class="line">        bis.close();</span><br><span class="line"></span><br><span class="line">        //6 把文档交给IndexWriter</span><br><span class="line">        indexWriter.addDocuments(docs);</span><br><span class="line">        //7 提交</span><br><span class="line">        indexWriter.commit();</span><br><span class="line">        //8 关闭</span><br><span class="line">        indexWriter.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="Search-方法"><a href="#Search-方法" class="headerlink" title="Search()方法"></a>Search()方法</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">    public static void search() throws ParseException, IOException &#123;</span><br><span class="line">      // 索引目录对象</span><br><span class="line">      Directory directory = FSDirectory.open(new File(<span class="string">&quot;d:\\indexDir&quot;</span>));</span><br><span class="line">      // 索引读取工具</span><br><span class="line">      IndexReader reader = DirectoryReader.open(directory);</span><br><span class="line">      // 索引搜索工具</span><br><span class="line">      IndexSearcher searcher = new IndexSearcher(reader);</span><br><span class="line"></span><br><span class="line">      // 创建查询解析器,两个参数：默认要查询的字段的名称，分词器</span><br><span class="line">      QueryParser parser = new QueryParser(<span class="string">&quot;title&quot;</span>, new IKAnalyzer());</span><br><span class="line">      // 创建查询对象</span><br><span class="line">      Query query = parser.parse(<span class="string">&quot;哈&quot;</span>);</span><br><span class="line"></span><br><span class="line">      // 搜索数据,两个参数：查询条件对象要查询的最大结果条数</span><br><span class="line">      // 返回的结果是 按照匹配度排名得分前N名的文档信息（包含查询到的总条数信息、所有符合条件的文档的编号信息）。</span><br><span class="line">      long begin=System.currentTimeMillis();</span><br><span class="line">      TopDocs topDocs = searcher.search(query, 10);</span><br><span class="line">      // 获取总条数</span><br><span class="line">      System.out.println(<span class="string">&quot;本次搜索共找到&quot;</span> + topDocs.totalHits + <span class="string">&quot;条数据&quot;</span>);</span><br><span class="line">      // 获取得分文档对象（ScoreDoc）数组.SocreDoc中包含：文档的编号、文档的得分</span><br><span class="line">      ScoreDoc[] scoreDocs = topDocs.scoreDocs;</span><br><span class="line">      Float f=0.0f;</span><br><span class="line">      <span class="keyword">for</span> (ScoreDoc scoreDoc : scoreDocs) &#123;</span><br><span class="line">          // 取出文档编号</span><br><span class="line">          int docID = scoreDoc.doc;</span><br><span class="line">          // 根据编号去找文档</span><br><span class="line">          Document doc = reader.document(docID);</span><br><span class="line">          System.out.println(<span class="string">&quot;id: &quot;</span> + doc.get(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">          System.out.println(<span class="string">&quot;title: &quot;</span> + doc.get(<span class="string">&quot;title&quot;</span>));</span><br><span class="line">          // 取出文档得分</span><br><span class="line">          System.out.println(<span class="string">&quot;得分： &quot;</span> + scoreDoc.score);</span><br><span class="line">          f=f+scoreDoc.score;</span><br><span class="line">      &#125;</span><br><span class="line">//查询时间</span><br><span class="line">      System.out.println(System.currentTimeMillis()-begin);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="预览效果"><a href="#预览效果" class="headerlink" title="预览效果"></a>预览效果</h3>
<h3 id="完"><a href="#完" class="headerlink" title="完"></a>完</h3>]]></content>
      <categories>
        <category>-搜索引擎 -入门 -Lucene</category>
      </categories>
      <tags>
        <tag>-入门 -简单 -SQL -JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>Mine</title>
    <url>/2020/09/10/Mine/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/09/10/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
</search>
