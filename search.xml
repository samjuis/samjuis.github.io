<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>layui table tr index获取</title>
    <url>/2020/09/11/LayuiTableTrIndex/</url>
    <content><![CDATA[<h2 id="Layui获取当前编辑单元格的行位置"><a href="#Layui获取当前编辑单元格的行位置" class="headerlink" title="Layui获取当前编辑单元格的行位置"></a>Layui获取当前编辑单元格的行位置</h2><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>  使用了edit:’text’，且使用数据为静态数组对象;如：arr{}，需求：改变其中某个参数值。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">table.on(‘edit(text)’,<span class="keyword">function</span>(obj)&#123;</span><br><span class="line">  //写上</span><br><span class="line">  console.log($(this).parents(‘tr’).data(‘index’));</span><br><span class="line"></span><br><span class="line">&#125;) </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="完"><a href="#完" class="headerlink" title="完"></a>完</h2>]]></content>
      <categories>
        <category>Layui</category>
        <category>HTML</category>
        <category>前端</category>
        <category>JS</category>
        <category>JQ</category>
        <category>ES6</category>
        <category>技术</category>
      </categories>
      <tags>
        <tag>实用 集合相关操作 表格</tag>
      </tags>
  </entry>
  <entry>
    <title>初学检索——Lucene</title>
    <url>/2020/09/11/Lucene1/</url>
    <content><![CDATA[<h2 id="Lucene的简单增删改查"><a href="#Lucene的简单增删改查" class="headerlink" title="Lucene的简单增删改查"></a>Lucene的简单增删改查</h2><h3 id="pom-xml配置"><a href="#pom-xml配置" class="headerlink" title="pom.xml配置"></a>pom.xml配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line">&lt;!-- lucene核心库 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.lucene&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;lucene-core&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;4.10.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- Lucene的查询解析器 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.lucene&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;lucene-queryparser&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;4.10.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- lucene的默认分词器库 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.lucene&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;lucene-analyzers-common&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;4.10.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- lucene的高亮显示 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.lucene&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;lucene-highlighter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;4.10.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;com.janeluo&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;ikanalyzer&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line">    &lt;version&gt;2012_u6&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">  public static void main(String[] args) throws IOException, ParseException &#123;</span><br><span class="line">//BufferInputStream实现IO流输入数据</span><br><span class="line">      evaluate();</span><br><span class="line">//Query查询</span><br><span class="line">      search();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="evaluate-方法"><a href="#evaluate-方法" class="headerlink" title="evaluate()方法"></a>evaluate()方法</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> public static void evaluate() throws IOException &#123;</span><br><span class="line">//        <span class="keyword">for</span>(Integer n: list)  &#123;</span><br><span class="line">//            <span class="keyword">if</span>(predicate.test(n)) &#123;</span><br><span class="line">//                System.out.println(n + <span class="string">&quot; &quot;</span>);</span><br><span class="line">//            &#125;</span><br><span class="line">//        &#125;</span><br><span class="line"></span><br><span class="line">        // 创建文档的集合</span><br><span class="line">        Collection&lt;Document&gt; docs = new ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        //2 索引目录类,指定索引在硬盘中的位置</span><br><span class="line">        Directory directory = FSDirectory.open(new File(<span class="string">&quot;d:\\indexDir&quot;</span>));</span><br><span class="line">        // 引入IK分词器</span><br><span class="line">        Analyzer analyzer = new IKAnalyzer();</span><br><span class="line">        //4 索引写出工具的配置对象</span><br><span class="line">        IndexWriterConfig conf = new IndexWriterConfig(Version.LATEST, analyzer);</span><br><span class="line"></span><br><span class="line">        // 设置打开方式：OpenMode.APPEND 会在索引库的基础上追加新索引。OpenMode.CREATE会先清空原来数据，再提交新的索引</span><br><span class="line">        conf.setOpenMode(IndexWriterConfig.OpenMode.CREATE);</span><br><span class="line">        //5 创建索引的写出工具类。参数：索引的目录和配置信息</span><br><span class="line">        IndexWriter indexWriter = new IndexWriter(directory, conf);</span><br><span class="line">        FileInputStream fileInputStream=new FileInputStream(<span class="string">&quot;D:\\indexDir\\data\\xiaoshuo.txt&quot;</span>);</span><br><span class="line">        BufferedInputStream bis = new BufferedInputStream(fileInputStream);</span><br><span class="line">        int len;</span><br><span class="line">        int i=1;</span><br><span class="line">        byte[] bs=new byte[1024];</span><br><span class="line">        long begin=System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>((len=bis.read(bs))!=-1)&#123;</span><br><span class="line">            //1 创建文档对象</span><br><span class="line">            Document document = new Document();</span><br><span class="line">            StringBuffer stringBuffer=new StringBuffer();</span><br><span class="line">            stringBuffer.append(new String(bs,0,len));</span><br><span class="line">            // 创建并添加字段信息。参数：字段的名称、字段的值、是否存储，这里选Store.YES代表存储到文档列表。Store.NO代表不存储</span><br><span class="line">            document.add(new StringField(<span class="string">&quot;id&quot;</span>, String.valueOf(i++), Field.Store.YES));</span><br><span class="line">            // 这里我们title字段需要用TextField，即创建索引又会被分词。StringField会创建索引，但是不会被分词</span><br><span class="line">            document.add(new TextField(<span class="string">&quot;title&quot;</span>, stringBuffer.toString(), Field.Store.YES));</span><br><span class="line">            docs.add(document);</span><br><span class="line">            stringBuffer=null;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(System.currentTimeMillis()-begin);</span><br><span class="line"></span><br><span class="line">        fileInputStream.close();</span><br><span class="line">        bis.close();</span><br><span class="line"></span><br><span class="line">        //6 把文档交给IndexWriter</span><br><span class="line">        indexWriter.addDocuments(docs);</span><br><span class="line">        //7 提交</span><br><span class="line">        indexWriter.commit();</span><br><span class="line">        //8 关闭</span><br><span class="line">        indexWriter.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="Search-方法"><a href="#Search-方法" class="headerlink" title="Search()方法"></a>Search()方法</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">    public static void search() throws ParseException, IOException &#123;</span><br><span class="line">      // 索引目录对象</span><br><span class="line">      Directory directory = FSDirectory.open(new File(<span class="string">&quot;d:\\indexDir&quot;</span>));</span><br><span class="line">      // 索引读取工具</span><br><span class="line">      IndexReader reader = DirectoryReader.open(directory);</span><br><span class="line">      // 索引搜索工具</span><br><span class="line">      IndexSearcher searcher = new IndexSearcher(reader);</span><br><span class="line"></span><br><span class="line">      // 创建查询解析器,两个参数：默认要查询的字段的名称，分词器</span><br><span class="line">      QueryParser parser = new QueryParser(<span class="string">&quot;title&quot;</span>, new IKAnalyzer());</span><br><span class="line">      // 创建查询对象</span><br><span class="line">      Query query = parser.parse(<span class="string">&quot;哈&quot;</span>);</span><br><span class="line"></span><br><span class="line">      // 搜索数据,两个参数：查询条件对象要查询的最大结果条数</span><br><span class="line">      // 返回的结果是 按照匹配度排名得分前N名的文档信息（包含查询到的总条数信息、所有符合条件的文档的编号信息）。</span><br><span class="line">      long begin=System.currentTimeMillis();</span><br><span class="line">      TopDocs topDocs = searcher.search(query, 10);</span><br><span class="line">      // 获取总条数</span><br><span class="line">      System.out.println(<span class="string">&quot;本次搜索共找到&quot;</span> + topDocs.totalHits + <span class="string">&quot;条数据&quot;</span>);</span><br><span class="line">      // 获取得分文档对象（ScoreDoc）数组.SocreDoc中包含：文档的编号、文档的得分</span><br><span class="line">      ScoreDoc[] scoreDocs = topDocs.scoreDocs;</span><br><span class="line">      Float f=0.0f;</span><br><span class="line">      <span class="keyword">for</span> (ScoreDoc scoreDoc : scoreDocs) &#123;</span><br><span class="line">          // 取出文档编号</span><br><span class="line">          int docID = scoreDoc.doc;</span><br><span class="line">          // 根据编号去找文档</span><br><span class="line">          Document doc = reader.document(docID);</span><br><span class="line">          System.out.println(<span class="string">&quot;id: &quot;</span> + doc.get(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">          System.out.println(<span class="string">&quot;title: &quot;</span> + doc.get(<span class="string">&quot;title&quot;</span>));</span><br><span class="line">          // 取出文档得分</span><br><span class="line">          System.out.println(<span class="string">&quot;得分： &quot;</span> + scoreDoc.score);</span><br><span class="line">          f=f+scoreDoc.score;</span><br><span class="line">      &#125;</span><br><span class="line">//查询时间</span><br><span class="line">      System.out.println(System.currentTimeMillis()-begin);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="预览效果"><a href="#预览效果" class="headerlink" title="预览效果"></a>预览效果</h3>

<h3 id="完"><a href="#完" class="headerlink" title="完"></a>完</h3>]]></content>
      <categories>
        <category>搜索引擎</category>
        <category>入门</category>
        <category>Lucene</category>
      </categories>
      <tags>
        <tag>入门</tag>
        <tag>简单</tag>
        <tag>SQL</tag>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>Mine</title>
    <url>/2020/09/10/Mine/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>add-binary</title>
    <url>/2020/09/24/add-binary/</url>
    <content><![CDATA[<h2 id="二进制求和"><a href="#二进制求和" class="headerlink" title="二进制求和"></a>二进制求和</h2><h5 id="给你两个二进制字符串，返回它们的和（用二进制表示）。输入为-非空-字符串且只包含数字-1-和-0。"><a href="#给你两个二进制字符串，返回它们的和（用二进制表示）。输入为-非空-字符串且只包含数字-1-和-0。" class="headerlink" title="给你两个二进制字符串，返回它们的和（用二进制表示）。输入为 非空 字符串且只包含数字 1 和 0。"></a>给你两个二进制字符串，返回它们的和（用二进制表示）。输入为 非空 字符串且只包含数字 1 和 0。</h5><h4 id="示例1："><a href="#示例1：" class="headerlink" title="示例1："></a>示例1：</h4><p>输入: a = “11”, b = “1”<br>输出: “100”</p>
<h4 id="示例2："><a href="#示例2：" class="headerlink" title="示例2："></a>示例2：</h4><p>输入: a = “1010”, b = “1011”<br>输出: “10101”</p>
<h4 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h4><p>每个字符串仅由字符 ‘0’ 或 ‘1’ 组成。<br>1 &lt;= a.length, b.length &lt;= 10^4<br>字符串如果不是 “0” ，就都不含前导零。</p>
<h4 id="我的代码-JAVA"><a href="#我的代码-JAVA" class="headerlink" title="我的代码-JAVA"></a>我的代码-JAVA</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public String addBinary(String a, String b) &#123;</span><br><span class="line"> int aIndex=a.length()-1;</span><br><span class="line">        int bIndex=b.length()-1;</span><br><span class="line">        boolean flag=<span class="literal">false</span>;</span><br><span class="line">        Stack&lt;Character&gt; stack=new Stack&lt;&gt;();</span><br><span class="line">        StringBuilder sb=new StringBuilder();</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(aIndex&gt;=0 &amp;&amp; bIndex&gt;=0)&#123;</span><br><span class="line">                <span class="keyword">if</span>(a.charAt(aIndex)==<span class="string">&#x27;1&#x27;</span> &amp;&amp; b.charAt(bIndex)==<span class="string">&#x27;1&#x27;</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">                        stack.push(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        stack.push(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    flag=<span class="literal">true</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(a.charAt(aIndex)==<span class="string">&#x27;1&#x27;</span> || b.charAt(bIndex)==<span class="string">&#x27;1&#x27;</span>)&#123;</span><br><span class="line">                            stack.push(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                            stack.push(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">                            flag=<span class="literal">false</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="keyword">if</span>(a.charAt(aIndex)==<span class="string">&#x27;1&#x27;</span> || b.charAt(bIndex)==<span class="string">&#x27;1&#x27;</span>)&#123;</span><br><span class="line">                            stack.push(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                            stack.push(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(aIndex&lt;0 &amp;&amp; bIndex &lt; 0)&#123;</span><br><span class="line">                <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">                    stack.push(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">                    flag=<span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(stack .size()!=0)&#123;</span><br><span class="line">                    sb.append(stack.pop());</span><br><span class="line">                    <span class="built_in">continue</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="built_in">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(aIndex &lt;0)&#123;</span><br><span class="line">                <span class="keyword">if</span>(flag &amp;&amp; b.charAt(bIndex)==<span class="string">&#x27;1&#x27;</span>)&#123;</span><br><span class="line">                    stack.push(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(flag) &#123;</span><br><span class="line">                    stack.push(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">                    flag=<span class="literal">false</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    stack.push(b.charAt(bIndex));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(bIndex&lt;0)&#123;</span><br><span class="line">                <span class="keyword">if</span>(flag &amp;&amp; a.charAt(aIndex)==<span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">                    stack.push(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">                    stack.push(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">                    flag=<span class="literal">false</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    stack.push(a.charAt(aIndex));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            aIndex--;</span><br><span class="line">            bIndex--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="耗时4ms-空间占用-40-3MB"><a href="#耗时4ms-空间占用-40-3MB" class="headerlink" title="耗时4ms 空间占用 40.3MB"></a>耗时4ms 空间占用 40.3MB</h4><h3 id="题解代码–java"><a href="#题解代码–java" class="headerlink" title="题解代码–java"></a>题解代码–java</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public String addBinary(String a, String b) &#123;</span><br><span class="line">        StringBuffer ans = new StringBuffer();</span><br><span class="line"></span><br><span class="line">        int n = Math.max(a.length(), b.length()), carry = 0;</span><br><span class="line">        <span class="keyword">for</span> (int i = 0; i &lt; n; ++i) &#123;</span><br><span class="line">            carry += i &lt; a.length() ? (a.charAt(a.length() - 1 - i) - <span class="string">&#x27;0&#x27;</span>) : 0;</span><br><span class="line">            carry += i &lt; b.length() ? (b.charAt(b.length() - 1 - i) - <span class="string">&#x27;0&#x27;</span>) : 0;</span><br><span class="line">            ans.append((char) (carry % 2 + <span class="string">&#x27;0&#x27;</span>));</span><br><span class="line">            carry /= 2;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (carry &gt; 0) &#123;</span><br><span class="line">            ans.append(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        ans.reverse();</span><br><span class="line"></span><br><span class="line">        <span class="built_in">return</span> ans.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3ms-37-7MB"><a href="#3ms-37-7MB" class="headerlink" title="3ms  37.7MB"></a>3ms  37.7MB</h3><h4 id="都差不多搞得跟真的一样。"><a href="#都差不多搞得跟真的一样。" class="headerlink" title="都差不多搞得跟真的一样。"></a>都差不多搞得跟真的一样。</h4><h3 id="完"><a href="#完" class="headerlink" title="完"></a>完</h3>]]></content>
      <categories>
        <category>算法</category>
        <category>字符串</category>
        <category>数学</category>
        <category>java</category>
        <category>leetcode</category>
        <category>简单</category>
      </categories>
      <tags>
        <tag>简单</tag>
        <tag>算法</tag>
        <tag>字符串</tag>
        <tag>数学</tag>
        <tag>java</tag>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>algorithm</title>
    <url>/2020/09/11/algorithm/</url>
    <content><![CDATA[<h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。</p>
<p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。<br>来源：[力扣（LeetCode）] (<a href="https://leetcode-cn.com/problems/two-sum">https://leetcode-cn.com/problems/two-sum</a>)</p>
<h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><p>给定 nums = [2, 7, 11, 15], target = 9</p>
<p>因为 nums[0] + nums[1] = 2 + 7 = 9<br>所以返回 [0, 1]</p>
<h5 id="我的代码-–JAVA"><a href="#我的代码-–JAVA" class="headerlink" title="我的代码 –JAVA"></a>我的代码 –JAVA</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> class Solution &#123;</span><br><span class="line">    public int[] twoSum(int[] nums, int target) &#123;</span><br><span class="line">        HashMap&lt;Integer,Integer&gt; map=new HashMap&lt;&gt;();</span><br><span class="line">        int[] ans=new int[2];</span><br><span class="line">        <span class="keyword">for</span>(int i=0;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(nums[i]))&#123;</span><br><span class="line">                ans[0]=map.get(nums[i]);</span><br><span class="line">                ans[1]=i;</span><br><span class="line">                <span class="built_in">return</span> ans;</span><br><span class="line">            &#125;</span><br><span class="line">            map.put(target-nums[i],i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>耗时 2ms 内存消耗 39.9MB</p>
<h5 id="我的代码-–C"><a href="#我的代码-–C" class="headerlink" title="我的代码 –C++"></a>我的代码 –C++</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">  public:</span><br><span class="line">    vector&lt;int&gt; twoSum(vector&lt;int&gt;&amp; nums, int target) &#123;</span><br><span class="line">        vector&lt;int&gt; newNums;</span><br><span class="line">    <span class="keyword">for</span> (int i = 0;i &lt; nums.size();i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (int j = i + 1;j &lt; nums.size();j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] + nums[j] == target) &#123;</span><br><span class="line">                newNums.push_back(i);</span><br><span class="line">                newNums.push_back(j);</span><br><span class="line">                <span class="built_in">return</span> newNums;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> newNums;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>耗时 904ms 内存消耗 9.1MB</p>
<h5 id="最佳解决方案"><a href="#最佳解决方案" class="headerlink" title="最佳解决方案"></a>最佳解决方案</h5><pre><code class="bash">  JAVA 段</code></pre>
<h2 id="完"><a href="#完" class="headerlink" title="完!"></a>完!</h2>]]></content>
      <categories>
        <category>Array</category>
        <category>两数之和</category>
        <category>JAVA</category>
        <category>Map</category>
        <category>C++</category>
      </categories>
      <tags>
        <tag>入门</tag>
        <tag>简单</tag>
        <tag>算法</tag>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>climbing-stairs</title>
    <url>/2020/09/26/climbing-stairs/</url>
    <content><![CDATA[<h2 id="爬楼梯"><a href="#爬楼梯" class="headerlink" title="爬楼梯"></a>爬楼梯</h2><h3 id="假设你正在爬楼梯。需要n阶你才能到达楼顶。-每次你可以爬1或2个台阶。你有多少种不同的方法可以爬到楼顶呢？"><a href="#假设你正在爬楼梯。需要n阶你才能到达楼顶。-每次你可以爬1或2个台阶。你有多少种不同的方法可以爬到楼顶呢？" class="headerlink" title="假设你正在爬楼梯。需要n阶你才能到达楼顶。 每次你可以爬1或2个台阶。你有多少种不同的方法可以爬到楼顶呢？"></a>假设你正在爬楼梯。需要n阶你才能到达楼顶。 每次你可以爬1或2个台阶。你有多少种不同的方法可以爬到楼顶呢？</h3><h4 id="注意：给定n是一个正整数。"><a href="#注意：给定n是一个正整数。" class="headerlink" title="注意：给定n是一个正整数。"></a>注意：给定n是一个正整数。</h4><h4 id="示例1："><a href="#示例1：" class="headerlink" title="示例1："></a>示例1：</h4><p> 输入：2<br> 输出：2<br> 解释：有两种方法可以爬到楼顶<br> 1.1阶+1阶<br> 2.2阶</p>
<h4 id="示例2："><a href="#示例2：" class="headerlink" title="示例2："></a>示例2：</h4><p> 输入：3<br> 输出：3<br> 解释：有三种方法可以爬到楼顶。</p>
<ol>
<li>1阶+1阶+1阶</li>
<li>1阶+2阶</li>
<li>2阶+1阶</li>
</ol>
<h3 id="我的代码-java-递归-动态规划"><a href="#我的代码-java-递归-动态规划" class="headerlink" title="我的代码-java-递归+动态规划"></a>我的代码-java-递归+动态规划</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int climbStairs(int n) &#123;</span><br><span class="line">        <span class="built_in">return</span> callBack(n,1,1,1,1);</span><br><span class="line">    &#125;</span><br><span class="line">    public int callBack(int n,int t,int x1,int x2,int sum)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n==0 || n==1)&#123;</span><br><span class="line">            <span class="built_in">return</span> 1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(t==n)&#123;</span><br><span class="line">            <span class="built_in">return</span> sum;</span><br><span class="line">        &#125;</span><br><span class="line">        sum=x1+x2;</span><br><span class="line">        <span class="built_in">return</span> callBack(n,t+1,x2,sum,sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="总结。典型的脱了裤子放屁。你说是算斐波拉契还好，换个说法就你妈的不会了。吐了"><a href="#总结。典型的脱了裤子放屁。你说是算斐波拉契还好，换个说法就你妈的不会了。吐了" class="headerlink" title="总结。典型的脱了裤子放屁。你说是算斐波拉契还好，换个说法就你妈的不会了。吐了"></a>总结。典型的脱了裤子放屁。你说是算斐波拉契还好，换个说法就你妈的不会了。吐了</h3><h3 id="耗时0ms-空间占用-35-6MB"><a href="#耗时0ms-空间占用-35-6MB" class="headerlink" title="耗时0ms 空间占用 35.6MB"></a>耗时0ms 空间占用 35.6MB</h3><h3 id="完"><a href="#完" class="headerlink" title="完"></a>完</h3>]]></content>
      <categories>
        <category>动态规划</category>
        <category>算法</category>
        <category>leetcode</category>
        <category>java</category>
        <category>简单</category>
        <category>斐波拉契</category>
      </categories>
      <tags>
        <tag>简单</tag>
        <tag>算法</tag>
        <tag>java</tag>
        <tag>leetcode</tag>
        <tag>动态规划</tag>
        <tag>斐波拉契</tag>
      </tags>
  </entry>
  <entry>
    <title>combine-two-tables</title>
    <url>/2020/09/11/combine-two-tables/</url>
    <content><![CDATA[<h2 id="组合两个表"><a href="#组合两个表" class="headerlink" title="组合两个表"></a>组合两个表</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><h5 id="表1-Person"><a href="#表1-Person" class="headerlink" title="表1: Person"></a>表1: Person</h5><p>+————-+———+<br>| 列名         | 类型     |<br>+————-+———+<br>| PersonId    | int     |<br>| FirstName   | varchar |<br>| LastName    | varchar |<br>+————-+———+<br>PersonId 是上表主键</p>
<h5 id="表2-Address"><a href="#表2-Address" class="headerlink" title="表2: Address"></a>表2: Address</h5><p>+————-+———+<br>| 列名         | 类型    |<br>+————-+———+<br>| AddressId   | int     |<br>| PersonId    | int     |<br>| City        | varchar |<br>| State       | varchar |<br>+————-+———+<br>AddressId 是上表主键
 </p>
<h5 id="编写一个-SQL-查询，满足条件：无论-person-是否有地址信息，都需要基于上述两表提供-person-的以下信息："><a href="#编写一个-SQL-查询，满足条件：无论-person-是否有地址信息，都需要基于上述两表提供-person-的以下信息：" class="headerlink" title="编写一个 SQL 查询，满足条件：无论 person 是否有地址信息，都需要基于上述两表提供 person 的以下信息："></a>编写一个 SQL 查询，满足条件：无论 person 是否有地址信息，都需要基于上述两表提供 person 的以下信息：</h5><p> </p>
<p>FirstName, LastName, City, State</p>
<h3 id="我的代码–MySQL"><a href="#我的代码–MySQL" class="headerlink" title="我的代码–MySQL"></a>我的代码–MySQL</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Write your MySQL query statement below</span></span><br><span class="line">select Firstname,LastName,City,State from Person a left join Address b on a.PersonId=b.PersonId <span class="built_in">where</span> 1=1 order by a.PersonId</span><br></pre></td></tr></table></figure>

<p>耗时 277ms 内存消耗0B</p>
<h3 id="完！"><a href="#完！" class="headerlink" title="完！"></a>完！</h3>]]></content>
      <categories>
        <category>算法</category>
        <category>简单</category>
        <category>Join</category>
        <category>SQL</category>
        <category>查询</category>
      </categories>
      <tags>
        <tag>入门级算法</tag>
        <tag>入门级SQL</tag>
        <tag>SELECT</tag>
      </tags>
  </entry>
  <entry>
    <title>count-and-say</title>
    <url>/2020/09/17/count-and-say/</url>
    <content><![CDATA[<h2 id="外观数列"><a href="#外观数列" class="headerlink" title="外观数列"></a>外观数列</h2><p>给定一个正整数 n（1 ≤ n ≤ 30），输出外观数列的第 n 项。</p>
<p>注意：整数序列中的每一项将表示为一个字符串。</p>
<p>「外观数列」是一个整数序列，从数字 1 开始，序列中的每一项都是对前一项的描述。前五项如下：</p>
<ol>
<li>1</li>
<li>11</li>
<li>21</li>
<li>1211</li>
<li>111221</li>
</ol>
<p>第一项是数字 1</p>
<p>描述前一项，这个数是 1 即 “一个 1 ”，记作 11</p>
<p>描述前一项，这个数是 11 即 “两个 1 ” ，记作 21</p>
<p>描述前一项，这个数是 21 即 “一个 2 一个 1 ” ，记作 1211</p>
<p>描述前一项，这个数是 1211 即 “一个 1 一个 2 两个 1 ” ，记作 111221</p>
<p> </p>
<h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1:"></a>示例 1:</h4><p>输入: 1<br>输出: “1”<br>解释：这是一个基本样例。</p>
<h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2:"></a>示例 2:</h4><p>输入: 4<br>输出: “1211”<br>解释：当 n = 3 时，序列是 “21”，其中我们有 “2” 和 “1” 两组，”2” 可以读作 “12”，也就是出现频次 = 1 而 值 = 2；类似 “1” 可以读作 “11”。所以答案是 “12” 和 “11” 组合在一起，也就是 “1211”。</p>
<h5 id="我的代码-java"><a href="#我的代码-java" class="headerlink" title="我的代码-java"></a>我的代码-java</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> import java.lang.annotation.Target;</span><br><span class="line">import java.util.*;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author Sam</span><br><span class="line"> * @date 2020/9/9 10:39</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">public class Solution &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        // TODO Auto-generated method stub</span><br><span class="line">        System.out.println(countAndSay(10));</span><br><span class="line">    &#125;</span><br><span class="line">    public static String countAndSay(int n) &#123;</span><br><span class="line">        <span class="keyword">if</span>(n&lt;1 || n&gt;30)&#123;</span><br><span class="line">            <span class="built_in">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        StringBuilder sb=new StringBuilder();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(n==1)&#123;</span><br><span class="line">            <span class="built_in">return</span> sb.append(1).toString();</span><br><span class="line">        &#125;</span><br><span class="line">        sb.append(1);</span><br><span class="line">        <span class="built_in">return</span> callBack(sb,2,n);</span><br><span class="line">    &#125;</span><br><span class="line">    public static String callBack(StringBuilder sb,int m,int n)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(m&gt;n)&#123;</span><br><span class="line">            <span class="built_in">return</span> sb.toString();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        int count=0; //重复出现-计数</span><br><span class="line">        int i=0;//指针</span><br><span class="line">        int k=Integer.parseInt(sb.toString().charAt(i)+<span class="string">&quot;&quot;</span>);//当前数</span><br><span class="line">        int t=k;// 变更前数值</span><br><span class="line">            StringBuilder sb1=new StringBuilder();</span><br><span class="line">            <span class="keyword">while</span>(i&lt;sb.length())&#123;</span><br><span class="line">                t=k;</span><br><span class="line">                <span class="keyword">if</span>(Integer.parseInt(sb.toString().charAt(i)+<span class="string">&quot;&quot;</span>)==k)&#123;</span><br><span class="line">                    count++;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span>(count!=0) &#123;</span><br><span class="line">                        sb1.append(count);</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        sb1.append(1);</span><br><span class="line">                    &#125;</span><br><span class="line">                    sb1.append(k);</span><br><span class="line">                    k++;</span><br><span class="line">                    count=0;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(k&gt;Integer.parseInt(sb.toString().charAt(i)+<span class="string">&quot;&quot;</span>))&#123;</span><br><span class="line">                    k=Integer.parseInt(sb.toString().charAt(i)+<span class="string">&quot;&quot;</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(k&lt;Integer.parseInt(sb.toString().charAt(i)+<span class="string">&quot;&quot;</span>))&#123;</span><br><span class="line">                    k=Integer.parseInt(sb.toString().charAt(i)+<span class="string">&quot;&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(Integer.parseInt(sb.toString().charAt(i)+<span class="string">&quot;&quot;</span>)==t)&#123;</span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(count==0)&#123;</span><br><span class="line">                sb1.append(1);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                sb1.append(count);</span><br><span class="line">            &#125;</span><br><span class="line">            sb1.append(k);</span><br><span class="line">        <span class="built_in">return</span> callBack(sb1,m+1,n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="耗时-32ms-空间占用-39-3MB"><a href="#耗时-32ms-空间占用-39-3MB" class="headerlink" title="耗时 32ms 空间占用 39.3MB"></a>耗时 32ms 空间占用 39.3MB</h5><h5 id="优化后-java"><a href="#优化后-java" class="headerlink" title="优化后-java"></a>优化后-java</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public String countAndSay(int n) &#123;</span><br><span class="line">        // 递归终止条件</span><br><span class="line">        <span class="keyword">if</span> (n == 1) &#123;</span><br><span class="line">            <span class="built_in">return</span> <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        StringBuffer res = new StringBuffer();</span><br><span class="line">        // 拿到上一层的字符串</span><br><span class="line">        String str = countAndSay(n - 1);</span><br><span class="line">        int length = str.length();</span><br><span class="line">        // 开始指针为0</span><br><span class="line">        int start = 0;</span><br><span class="line">        // 注意这从起始条件要和下面长度统一</span><br><span class="line">        <span class="keyword">for</span> (int i = 1; i &lt; length + 1; i++) &#123;</span><br><span class="line">            // 字符串最后一位直接拼接</span><br><span class="line">            <span class="keyword">if</span> (i == length) &#123;</span><br><span class="line">                res.append(i - start).append(str.charAt(start));</span><br><span class="line">            // 直到start位的字符串和i位的字符串不同，拼接并更新start位</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (str.charAt(i) != str.charAt(start) ) &#123;</span><br><span class="line">                res.append(i - start).append(str.charAt(start));</span><br><span class="line">                start = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> res.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="说明，没看懂，有空再研究。这是简单分类里的奇葩吐了-耗时半天做出来"><a href="#说明，没看懂，有空再研究。这是简单分类里的奇葩吐了-耗时半天做出来" class="headerlink" title="说明，没看懂，有空再研究。这是简单分类里的奇葩吐了 耗时半天做出来"></a>说明，没看懂，有空再研究。这是简单分类里的奇葩吐了 耗时半天做出来</h5><h5 id="耗时-1ms-空间占用-36-4MB"><a href="#耗时-1ms-空间占用-36-4MB" class="headerlink" title="耗时 1ms 空间占用 36.4MB"></a>耗时 1ms 空间占用 36.4MB</h5><h3 id="完！"><a href="#完！" class="headerlink" title="完！"></a>完！</h3>]]></content>
      <categories>
        <category>java</category>
        <category>算法</category>
        <category>字符串</category>
        <category>leetcode</category>
        <category>入门级算法</category>
        <category>简单</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>字符串</tag>
        <tag>java</tag>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/09/10/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>implement-strstr</title>
    <url>/2020/09/15/implement-strstr/</url>
    <content><![CDATA[<h2 id="实现-strStr"><a href="#实现-strStr" class="headerlink" title="实现 strStr()"></a>实现 strStr()</h2><h5 id="实现-strStr-函数。"><a href="#实现-strStr-函数。" class="headerlink" title="实现 strStr() 函数。"></a>实现 strStr() 函数。</h5><p>给定一个 haystack 字符串和一个 needle 字符串，在 haystack 字符串中找出 needle 字符串出现的第一个位置 (从0开始)。如果不存在，则返回  -1。</p>
<h5 id="示例1："><a href="#示例1：" class="headerlink" title="示例1："></a>示例1：</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: haystack &#x3D; &quot;hello&quot;, needle &#x3D; &quot;ll&quot;</span><br><span class="line">输出: 2 </span><br></pre></td></tr></table></figure>

<h5 id="示例2："><a href="#示例2：" class="headerlink" title="示例2："></a>示例2：</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: haystack &#x3D; &quot;aaaaa&quot;, needle &#x3D; &quot;bba&quot;</span><br><span class="line">输出: -1 </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="说明-当-needle-是空字符串时，我们应当返回什么值呢？这是一个在面试中很好的问题。"><a href="#说明-当-needle-是空字符串时，我们应当返回什么值呢？这是一个在面试中很好的问题。" class="headerlink" title="说明 : 当 needle 是空字符串时，我们应当返回什么值呢？这是一个在面试中很好的问题。"></a>说明 : 当 needle 是空字符串时，我们应当返回什么值呢？这是一个在面试中很好的问题。</h5><h5 id="对于本题而言，当-needle-是空字符串时我们应当返回-0-。这与C语言的-strstr-以及-Java的-indexOf-定义相符。"><a href="#对于本题而言，当-needle-是空字符串时我们应当返回-0-。这与C语言的-strstr-以及-Java的-indexOf-定义相符。" class="headerlink" title="对于本题而言，当 needle 是空字符串时我们应当返回 0 。这与C语言的 strstr() 以及 Java的 indexOf() 定义相符。"></a>对于本题而言，当 needle 是空字符串时我们应当返回 0 。这与C语言的 strstr() 以及 Java的 indexOf() 定义相符。</h5><h5 id="我的代码-JAVA"><a href="#我的代码-JAVA" class="headerlink" title="我的代码-JAVA"></a>我的代码-JAVA</h5><h4 id="简单做法"><a href="#简单做法" class="headerlink" title="简单做法"></a>简单做法</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int strStr(String haystack, String needle) &#123;</span><br><span class="line">         <span class="built_in">return</span> haystack.indexOf(needle);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="耗时-0ms-空间占用-38-3MB"><a href="#耗时-0ms-空间占用-38-3MB" class="headerlink" title="耗时 0ms 空间占用 38.3MB"></a>耗时 0ms 空间占用 38.3MB</h6><h4 id="稍微复杂点-JAVA"><a href="#稍微复杂点-JAVA" class="headerlink" title="稍微复杂点-JAVA"></a>稍微复杂点-JAVA</h4><p>(莫名其妙改了一处就不超时了 - -！)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int strStr(String haystack, String needle) &#123;</span><br><span class="line">         boolean flag=<span class="literal">false</span>;</span><br><span class="line">        int index=0;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(null == haystack || null == needle)&#123;</span><br><span class="line">            <span class="built_in">return</span> -1;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(haystack.length()&lt;1 &amp;&amp; needle.length() &gt;0)&#123;</span><br><span class="line">            <span class="built_in">return</span> -1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(haystack.length()&gt;0 &amp;&amp; needle.length() &lt; 1)&#123;</span><br><span class="line">            <span class="built_in">return</span> 0;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(haystack.length()&lt;needle.length())&#123;</span><br><span class="line">            <span class="built_in">return</span> -1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(int i=0;i&lt;haystack.length();i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(haystack.charAt(i)==needle.charAt(0))&#123;</span><br><span class="line"></span><br><span class="line">                    index =i;</span><br><span class="line">                    flag=<span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">for</span>(int j=1;j&lt;needle.length();j++)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(index+1==haystack.length())&#123;</span><br><span class="line">                            flag=<span class="literal">false</span>;</span><br><span class="line">                            i=index;</span><br><span class="line">                            <span class="built_in">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span>(haystack.charAt(++index)!=needle.charAt(j))&#123;</span><br><span class="line">                            flag=<span class="literal">false</span>;</span><br><span class="line">                            <span class="built_in">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(flag)&#123;index=i; <span class="built_in">break</span> ;&#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;index=-1;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> index;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="耗时6ms-空间占用-38MB"><a href="#耗时6ms-空间占用-38MB" class="headerlink" title="耗时6ms 空间占用 38MB"></a>耗时6ms 空间占用 38MB</h4><h4 id="复杂做法-参考KMP-相似查找算法。"><a href="#复杂做法-参考KMP-相似查找算法。" class="headerlink" title="复杂做法 参考KMP 相似查找算法。"></a>复杂做法 参考KMP 相似查找算法。</h4><h3 id="完"><a href="#完" class="headerlink" title="完"></a>完</h3>]]></content>
      <categories>
        <category>字符串</category>
        <category>java</category>
        <category>leetcode</category>
        <category>算法</category>
        <category>简单</category>
        <category>困难</category>
      </categories>
      <tags>
        <tag>字符串</tag>
        <tag>java</tag>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>length-of-last-word</title>
    <url>/2020/09/23/length-of-last-word/</url>
    <content><![CDATA[<h2 id="最后一个单词的长度"><a href="#最后一个单词的长度" class="headerlink" title="最后一个单词的长度"></a>最后一个单词的长度</h2><h5 id="给定一个仅包含大小写字母和空格-‘-‘-的字符串-s，返回其最后一个单词的长度。如果字符串从左向右滚动显示，那么最后一个单词就是最后出现的单词。如果不存在最后一个单词，请返回-0-。"><a href="#给定一个仅包含大小写字母和空格-‘-‘-的字符串-s，返回其最后一个单词的长度。如果字符串从左向右滚动显示，那么最后一个单词就是最后出现的单词。如果不存在最后一个单词，请返回-0-。" class="headerlink" title="给定一个仅包含大小写字母和空格 ‘ ‘ 的字符串 s，返回其最后一个单词的长度。如果字符串从左向右滚动显示，那么最后一个单词就是最后出现的单词。如果不存在最后一个单词，请返回 0 。"></a>给定一个仅包含大小写字母和空格 ‘ ‘ 的字符串 s，返回其最后一个单词的长度。如果字符串从左向右滚动显示，那么最后一个单词就是最后出现的单词。如果不存在最后一个单词，请返回 0 。</h5><h5 id="说明：一个单词是指仅由字母组成、不包含任何空格字符的-最大子字符串。"><a href="#说明：一个单词是指仅由字母组成、不包含任何空格字符的-最大子字符串。" class="headerlink" title="说明：一个单词是指仅由字母组成、不包含任何空格字符的 最大子字符串。"></a>说明：一个单词是指仅由字母组成、不包含任何空格字符的 最大子字符串。</h5><h4 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h4><p>输入: “Hello World”<br>输出: 5</p>
<h5 id="我的代码-java"><a href="#我的代码-java" class="headerlink" title="我的代码-java"></a>我的代码-java</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int lengthOfLastWord(String s) &#123;</span><br><span class="line">        <span class="keyword">if</span>(s.equals(<span class="string">&quot;&quot;</span>) || null == s)&#123;</span><br><span class="line">            <span class="built_in">return</span> 0;</span><br><span class="line">        &#125;</span><br><span class="line">       int r=s.length()-1;</span><br><span class="line">       int l;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">while</span>(r&gt;=0 &amp;&amp; s.charAt(r)==<span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">           r--;</span><br><span class="line">       &#125;</span><br><span class="line">       l=r;</span><br><span class="line">       <span class="keyword">while</span>(l&gt;=0 &amp;&amp; s.charAt(l) != <span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">           l--;</span><br><span class="line">       &#125;</span><br><span class="line">        <span class="built_in">return</span> r-l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="说明：从后往前找找到不是空格后，从当前空格往前找非空格的字符数-两个值相差就是位数"><a href="#说明：从后往前找找到不是空格后，从当前空格往前找非空格的字符数-两个值相差就是位数" class="headerlink" title="说明：从后往前找找到不是空格后，从当前空格往前找非空格的字符数 两个值相差就是位数"></a>说明：从后往前找找到不是空格后，从当前空格往前找非空格的字符数 两个值相差就是位数</h5><h4 id="耗时-0ms-空间占用-36-6MB"><a href="#耗时-0ms-空间占用-36-6MB" class="headerlink" title="耗时 0ms 空间占用 36.6MB"></a>耗时 0ms 空间占用 36.6MB</h4><h5 id="简单粗暴方法-java"><a href="#简单粗暴方法-java" class="headerlink" title="简单粗暴方法-java"></a>简单粗暴方法-java</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int lengthOfLastWord(String s) &#123;</span><br><span class="line">        <span class="keyword">if</span>(s.equals(<span class="string">&quot;&quot;</span>) || null == s || s.split(<span class="string">&quot; &quot;</span>).length==0)&#123;</span><br><span class="line">            <span class="built_in">return</span> 0;</span><br><span class="line">        &#125;</span><br><span class="line">            <span class="built_in">return</span> s.split(<span class="string">&quot; &quot;</span>)[s.split(<span class="string">&quot; &quot;</span>).length-1].length();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="耗时-2ms-空间占用-38-5MB"><a href="#耗时-2ms-空间占用-38-5MB" class="headerlink" title="耗时 2ms 空间占用 38.5MB"></a>耗时 2ms 空间占用 38.5MB</h4><h3 id="完"><a href="#完" class="headerlink" title="完"></a>完</h3>]]></content>
      <categories>
        <category>字符串</category>
        <category>算法</category>
        <category>java</category>
        <category>leetcode</category>
        <category>简单</category>
      </categories>
      <tags>
        <tag>简单</tag>
        <tag>算法</tag>
        <tag>字符串</tag>
        <tag>java</tag>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>longest-common-prefix</title>
    <url>/2020/09/11/longest-common-prefix/</url>
    <content><![CDATA[<h2 id="最长公共前缀"><a href="#最长公共前缀" class="headerlink" title="最长公共前缀"></a>最长公共前缀</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>编写一个函数来查找字符串数组中的最长公共前缀。</p>
<p>如果不存在公共前缀，返回空字符串 “”。</p>
<p>示例 1:</p>
<p>输入: [“flower”,”flow”,”flight”]<br>输出: “fl”</p>
<h5 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2:"></a>示例 2:</h5><p>输入: [“dog”,”racecar”,”car”]<br>输出: “”<br>解释: 输入不存在公共前缀。</p>
<h5 id="说明"><a href="#说明" class="headerlink" title="说明:"></a>说明:</h5><p>所有输入只包含小写字母 a-z 。</p>
<h3 id="我的代码"><a href="#我的代码" class="headerlink" title="我的代码"></a>我的代码</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public String longestCommonPrefix(String[] strs) &#123;</span><br><span class="line">        StringBuffer sb=new StringBuffer();</span><br><span class="line">        int maxLength=0;</span><br><span class="line">        int t=0;</span><br><span class="line">        <span class="keyword">for</span>(int i=0;i&lt;strs.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(maxLength&lt;strs[i].length())&#123;</span><br><span class="line">                maxLength=strs[i].length();</span><br><span class="line">                t=i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(int i=0;i&lt;maxLength;i++)&#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                sb.append(strs[t].charAt(i));</span><br><span class="line">            &#125;catch (Exception e)&#123;</span><br><span class="line">                <span class="keyword">if</span>(sb.toString().length()==0)&#123;</span><br><span class="line">                    <span class="built_in">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">return</span> sb.toString();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(int j=0;j&lt; strs.length;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(strs[j].matches(sb.toString()+<span class="string">&quot;.*&quot;</span>))&#123;</span><br><span class="line">                    <span class="built_in">continue</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    sb.deleteCharAt(sb.length()-1);</span><br><span class="line">                    <span class="built_in">return</span> sb.toString();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(sb.toString().length()==0)&#123;</span><br><span class="line">            <span class="built_in">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>耗时 238ms 内存消耗 40.2MB</p>
<h3 id="优化代码（搬运评论）-JAVA"><a href="#优化代码（搬运评论）-JAVA" class="headerlink" title="优化代码（搬运评论）-JAVA"></a>优化代码（搬运评论）-JAVA</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public String longestCommonPrefix(String[] strs) &#123;</span><br><span class="line">        <span class="keyword">if</span>(strs.length == 0)&#123;</span><br><span class="line">            <span class="built_in">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String str = strs[0];</span><br><span class="line">        <span class="keyword">for</span>(int i = 1; i &lt; strs.length; i++)&#123;</span><br><span class="line">            <span class="keyword">while</span>(strs[i].indexOf(str) != 0)&#123;</span><br><span class="line">                str=str.substring(0, str.length() - 1);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>反正很快<del>~</del></p>
<h3 id="完！"><a href="#完！" class="headerlink" title="完！"></a>完！</h3>]]></content>
      <categories>
        <category>JAVA</category>
        <category>leetcode</category>
        <category>简单</category>
        <category>算法</category>
        <category>字符串</category>
      </categories>
      <tags>
        <tag>字符串</tag>
        <tag>入门级算法</tag>
      </tags>
  </entry>
  <entry>
    <title>maximum-subarray</title>
    <url>/2020/09/22/maximum-subarray/</url>
    <content><![CDATA[<h2 id="最大子序和"><a href="#最大子序和" class="headerlink" title="最大子序和"></a>最大子序和</h2><h5 id="给定一个整数数组-nums-，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。"><a href="#给定一个整数数组-nums-，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。" class="headerlink" title="给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。"></a>给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</h5><h4 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h4><p> 输入: [-2,1,-3,4,-1,2,1,-5,4]<br>输出: 6<br>解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。</p>
<h5 id="进阶："><a href="#进阶：" class="headerlink" title="进阶："></a>进阶：</h5><p>如果你已经实现复杂度为 O(n) 的解法，尝试使用更为精妙的分治法求解。</p>
<h4 id="我的代码-JAVA-动态规划"><a href="#我的代码-JAVA-动态规划" class="headerlink" title="我的代码-JAVA-动态规划"></a>我的代码-JAVA-动态规划</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int maxSubArray(int[] nums) &#123;</span><br><span class="line"> 	<span class="keyword">if</span>(nums.length ==0)&#123;</span><br><span class="line">            <span class="built_in">return</span> 0;</span><br><span class="line">        &#125;</span><br><span class="line">            int ans,pre=0;</span><br><span class="line">            ans=nums[0];</span><br><span class="line">            <span class="keyword">for</span>(int i=0;i&lt;nums.length;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[i]&lt;pre+nums[i])&#123;</span><br><span class="line">                    pre=pre+nums[i];</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    pre=nums[i];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(ans&lt;pre)&#123;</span><br><span class="line">                    ans=pre;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="用时1ms-空间占用-38-6MB-思路"><a href="#用时1ms-空间占用-38-6MB-思路" class="headerlink" title="用时1ms 空间占用 38.6MB 思路"></a>用时1ms 空间占用 38.6MB 思路</h4><p>当前数与前一个数相加 判断是否大于当前数。与之比较 最大子序的和是否大于当前数的和</p>
<h5 id="题解代码——JAVA-分治"><a href="#题解代码——JAVA-分治" class="headerlink" title="题解代码——JAVA-分治"></a>题解代码——JAVA-分治</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public class Status &#123;</span><br><span class="line">        public int lSum, rSum, mSum, iSum;</span><br><span class="line"></span><br><span class="line">        public Status(int lSum, int rSum, int mSum, int iSum) &#123;</span><br><span class="line">            this.lSum = lSum;</span><br><span class="line">            this.rSum = rSum;</span><br><span class="line">            this.mSum = mSum;</span><br><span class="line">            this.iSum = iSum;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int maxSubArray(int[] nums) &#123;</span><br><span class="line">        <span class="built_in">return</span> getInfo(nums, 0, nums.length - 1).mSum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Status getInfo(int[] a, int l, int r) &#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">            <span class="built_in">return</span> new Status(a[l], a[l], a[l], a[l]);</span><br><span class="line">        &#125;</span><br><span class="line">        int m = (l + r) &gt;&gt; 1;</span><br><span class="line">        Status lSub = getInfo(a, l, m);</span><br><span class="line">        Status rSub = getInfo(a, m + 1, r);</span><br><span class="line">        <span class="built_in">return</span> pushUp(lSub, rSub);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Status pushUp(Status l, Status r) &#123;</span><br><span class="line">        int iSum = l.iSum + r.iSum;</span><br><span class="line">        int lSum = Math.max(l.lSum, l.iSum + r.lSum);</span><br><span class="line">        int rSum = Math.max(r.rSum, r.iSum + l.rSum);</span><br><span class="line">        int mSum = Math.max(Math.max(l.mSum, r.mSum), l.rSum + r.lSum);</span><br><span class="line">        <span class="built_in">return</span> new Status(lSum, rSum, mSum, iSum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="有空再研究-递归分治。-最早这样做，但没做出来。。-线段树"><a href="#有空再研究-递归分治。-最早这样做，但没做出来。。-线段树" class="headerlink" title="有空再研究 递归分治。 最早这样做，但没做出来。。 线段树"></a>有空再研究 递归分治。 最早这样做，但没做出来。。 线段树</h5><h3 id="链接地址-https-leetcode-cn-com-problems-maximum-subarray-solution-zui-da-zi-xu-he-by-leetcode-solution"><a href="#链接地址-https-leetcode-cn-com-problems-maximum-subarray-solution-zui-da-zi-xu-he-by-leetcode-solution" class="headerlink" title="链接地址[https://leetcode-cn.com/problems/maximum-subarray/solution/zui-da-zi-xu-he-by-leetcode-solution/]"></a>链接地址[<a href="https://leetcode-cn.com/problems/maximum-subarray/solution/zui-da-zi-xu-he-by-leetcode-solution/]">https://leetcode-cn.com/problems/maximum-subarray/solution/zui-da-zi-xu-he-by-leetcode-solution/]</a></h3>]]></content>
      <categories>
        <category>分治算法</category>
        <category>动态规划</category>
        <category>数组</category>
        <category>java</category>
        <category>简单</category>
      </categories>
      <tags>
        <tag>简单</tag>
        <tag>java</tag>
        <tag>动态规划</tag>
        <tag>分治算法</tag>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title>merge-sorted-array</title>
    <url>/2020/09/26/merge-sorted-array/</url>
    <content><![CDATA[<h2 id="合并两个有序数组"><a href="#合并两个有序数组" class="headerlink" title="合并两个有序数组"></a>合并两个有序数组</h2><h4 id="给你两个有序整数数组-nums1-和-nums2，请你将-nums2-合并到-nums1-中，使-nums1-成为一个有序数组。"><a href="#给你两个有序整数数组-nums1-和-nums2，请你将-nums2-合并到-nums1-中，使-nums1-成为一个有序数组。" class="headerlink" title="给你两个有序整数数组 nums1 和 nums2，请你将 nums2 合并到 nums1 中，使 nums1 成为一个有序数组。"></a>给你两个有序整数数组 nums1 和 nums2，请你将 nums2 合并到 nums1 中，使 nums1 成为一个有序数组。</h4><h4 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h4><p>初始化 nums1 和 nums2 的元素数量分别为 m 和 n 。<br>你可以假设 nums1 有足够的空间（空间大小大于或等于 m + n）来保存 nums2 中的元素。</p>
<h4 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h4><p>输入:<br>nums1 = [1,2,3,0,0,0], m = 3<br>nums2 = [2,5,6],       n = 3</p>
<p>输出: [1,2,2,3,5,6]</p>
<h4 id="我的代码——java-流氓式写法"><a href="#我的代码——java-流氓式写法" class="headerlink" title="我的代码——java-流氓式写法"></a>我的代码——java-流氓式写法</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public void merge(int[] nums1, int m, int[] nums2, int n) &#123;</span><br><span class="line">        m+=n;</span><br><span class="line">        <span class="keyword">for</span>(int i=0;i &lt; n;i++)&#123;</span><br><span class="line">            nums1[m-i-1]=nums2[i];</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(nums1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="结果-耗时-1ms-空间占用-39-3MB"><a href="#结果-耗时-1ms-空间占用-39-3MB" class="headerlink" title="结果 耗时 1ms 空间占用 39.3MB"></a>结果 耗时 1ms 空间占用 39.3MB</h4><h4 id="我的代码–Java"><a href="#我的代码–Java" class="headerlink" title="我的代码–Java"></a>我的代码–Java</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public void merge(int[] nums1, int m, int[] nums2, int n) &#123;</span><br><span class="line">        m--;n--;</span><br><span class="line">        int i=m+n+1;</span><br><span class="line">        <span class="keyword">while</span>(i&gt;=0)&#123;</span><br><span class="line">                <span class="keyword">if</span>(n&lt;0)&#123;</span><br><span class="line">                    nums1[i]=nums1[m--];</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>( m &lt; 0)&#123;</span><br><span class="line">                    nums1[i]=nums2[n--];</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(m&lt;0 &amp;&amp; n&lt;0) &#123;</span><br><span class="line">                    <span class="built_in">break</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    nums1[i] = nums1[m] &lt; nums2[n] ? nums2[n--] : nums1[m--];</span><br><span class="line">                &#125;</span><br><span class="line">                i--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="结果-耗时0ms-空间占用-39-1MB"><a href="#结果-耗时0ms-空间占用-39-1MB" class="headerlink" title="结果 耗时0ms 空间占用 39.1MB"></a>结果 耗时0ms 空间占用 39.1MB</h4><h3 id="完"><a href="#完" class="headerlink" title="完"></a>完</h3>]]></content>
      <categories>
        <category>java</category>
        <category>leetcode</category>
        <category>算法</category>
        <category>简单</category>
        <category>数组</category>
        <category>双指针</category>
      </categories>
      <tags>
        <tag>简单</tag>
        <tag>算法</tag>
        <tag>java</tag>
        <tag>leetcode</tag>
        <tag>数组</tag>
        <tag>双指针</tag>
      </tags>
  </entry>
  <entry>
    <title>merge-two-sorted-lists</title>
    <url>/2020/09/14/merge-two-sorted-lists/</url>
    <content><![CDATA[<h2 id="合并两个有序链表"><a href="#合并两个有序链表" class="headerlink" title="合并两个有序链表"></a>合并两个有序链表</h2><h4 id="将两个升序链表合并为一个新的-升序-链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。"><a href="#将两个升序链表合并为一个新的-升序-链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。" class="headerlink" title="将两个升序链表合并为一个新的 升序 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 "></a>将两个升序链表合并为一个新的 升序 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 </h4><p> </p>
<h5 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h5><p>输入：1-&gt;2-&gt;4, 1-&gt;3-&gt;4<br>输出：1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</p>
<h5 id="先简单输出ListNode"><a href="#先简单输出ListNode" class="headerlink" title="先简单输出ListNode"></a>先简单输出ListNode</h5><h3 id="代码段"><a href="#代码段" class="headerlink" title="代码段"></a>代码段</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">public class Solution &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        // TODO Auto-generated method stub</span><br><span class="line">        ListNode l1=new ListNode(1);</span><br><span class="line">        ListNode l2=new ListNode(1);</span><br><span class="line">        l1.next=new ListNode(2);</span><br><span class="line">        l1.next.next=new ListNode(4);</span><br><span class="line">        l2.next=new ListNode(3);</span><br><span class="line">        l2.next.next=new ListNode(4);</span><br><span class="line"></span><br><span class="line">        mergeTwoLists(l1,l2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">        private static void mergeTwoLists(ListNode l1, ListNode l2) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(l1!=null || l2 !=null)&#123;</span><br><span class="line">                System.out.println(l1.val);</span><br><span class="line">                l1=l1.next;</span><br><span class="line">                System.out.println(l2.val);</span><br><span class="line">                l2=l2.next;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class  ListNode&#123;</span><br><span class="line">    Integer val;</span><br><span class="line">    ListNode next;</span><br><span class="line">    public ListNode(Integer x)&#123;</span><br><span class="line">        val=x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="输出结果-1-1-2-3-4-4"><a href="#输出结果-1-1-2-3-4-4" class="headerlink" title="输出结果 1 1 2 3 4 4"></a>输出结果 1 1 2 3 4 4</h5><h5 id="Start——JAVA"><a href="#Start——JAVA" class="headerlink" title="Start——JAVA"></a>Start——JAVA</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">import java.lang.annotation.Target;</span><br><span class="line">import java.util.*;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author Sam</span><br><span class="line"> * @date 2020/9/9 10:39</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">public class Solution &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        // TODO Auto-generated method stub</span><br><span class="line">        ListNode l1=new ListNode();</span><br><span class="line">        ListNode l2=new ListNode();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        ListNode l3=mergeTwoLists(l1,l2);</span><br><span class="line">        <span class="keyword">while</span>(l3!=null)&#123;</span><br><span class="line">            System.out.println(l3.val);</span><br><span class="line">            l3=l3.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">        private static ListNode mergeTwoLists(ListNode l1, ListNode l2) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(l1==null &amp;&amp; l2 == null)&#123;</span><br><span class="line">                <span class="built_in">return</span> l1;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(l1== null)&#123;</span><br><span class="line">                <span class="built_in">return</span> l2;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(l2==null)&#123;</span><br><span class="line">            <span class="built_in">return</span> l1;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(l1.val&lt;l2.val)&#123;</span><br><span class="line">                ListNode head=new ListNode(l1.val);</span><br><span class="line">                ListNode l3=head;</span><br><span class="line">                l1=l1.next;</span><br><span class="line">                callBack(l1,l2,l3);</span><br><span class="line">                <span class="built_in">return</span> l3;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                ListNode head=new ListNode(l2.val);</span><br><span class="line">                ListNode l3=head;</span><br><span class="line">                l2=l2.next;</span><br><span class="line">                callBack(l1,l2,l3);</span><br><span class="line"></span><br><span class="line">                <span class="built_in">return</span> l3;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    private static void callBack(ListNode l1,ListNode l2,ListNode l3)&#123;</span><br><span class="line">        <span class="keyword">if</span>(l1==null &amp;&amp; l2 ==null)&#123;</span><br><span class="line">            <span class="built_in">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(l1==null)&#123;</span><br><span class="line">            <span class="keyword">while</span>(l2!=null)&#123;</span><br><span class="line">                ListNode next=new ListNode(l2.val);</span><br><span class="line">                l3.next=next;</span><br><span class="line">                l3=l3.next;</span><br><span class="line">                l2=l2.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(l2==null)&#123;</span><br><span class="line">            <span class="keyword">while</span>(l1!=null)&#123;</span><br><span class="line">                ListNode next=new ListNode(l1.val);</span><br><span class="line">                l3.next=next;</span><br><span class="line">                l3=l3.next;</span><br><span class="line">                l1=l1.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (l1.val &lt; l2.val) &#123;</span><br><span class="line">                ListNode next=new ListNode(l1.val);</span><br><span class="line">                l3.next=next;</span><br><span class="line">                l3=l3.next;</span><br><span class="line">                l1 = l1.next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ListNode next=new ListNode(l2.val);</span><br><span class="line">                l3.next=next;</span><br><span class="line">                l3=l3.next;</span><br><span class="line">                l2 = l2.next;</span><br><span class="line">            &#125;</span><br><span class="line">            callBack(l1,l2,l3);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class  ListNode&#123;</span><br><span class="line">    int val;</span><br><span class="line">    ListNode next;</span><br><span class="line">    public ListNode(int x)&#123;</span><br><span class="line">        val=x;</span><br><span class="line">    &#125;</span><br><span class="line">    public <span class="function"><span class="title">ListNode</span></span>()&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="结果-耗时-1ms-空间消耗-39-4MB"><a href="#结果-耗时-1ms-空间消耗-39-4MB" class="headerlink" title="结果 耗时 1ms,空间消耗 39.4MB"></a>结果 耗时 1ms,空间消耗 39.4MB</h5><h3 id="完"><a href="#完" class="headerlink" title="完"></a>完</h3>]]></content>
      <categories>
        <category>leetcode</category>
        <category>链表</category>
        <category>入门级算法</category>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>算法</tag>
        <tag>leetcode</tag>
        <tag>入门级算法</tag>
      </tags>
  </entry>
  <entry>
    <title>palindrome-number</title>
    <url>/2020/09/11/palindrome-number/</url>
    <content><![CDATA[<h2 id="回文数"><a href="#回文数" class="headerlink" title="回文数"></a>回文数</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</p>
<h5 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1:"></a>示例 1:</h5><p>输入: 121<br>输出: true</p>
<h5 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2:"></a>示例 2:</h5><p>输入: -121<br>输出: false<br>解释: 从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。</p>
<h5 id="示例-3"><a href="#示例-3" class="headerlink" title="示例 3:"></a>示例 3:</h5><p>输入: 10<br>输出: false<br>解释: 从右向左读, 为 01 。因此它不是一个回文数。</p>
<h5 id="进阶"><a href="#进阶" class="headerlink" title="进阶:"></a>进阶:</h5><p>你能不将整数转为字符串来解决这个问题吗？</p>
<h4 id="我的代码–JAVA"><a href="#我的代码–JAVA" class="headerlink" title="我的代码–JAVA"></a>我的代码–JAVA</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public boolean isPalindrome(int x) &#123;</span><br><span class="line">        int n=0;</span><br><span class="line">        int t=x;</span><br><span class="line">        <span class="keyword">if</span>(x&lt;0)  <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(x!=0)&#123;</span><br><span class="line">            n=n*10+x%10;</span><br><span class="line">            x/=10;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> n==t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>耗时 10ms 内存消耗 39MB</p>
<h5 id="PS-与整数反转类似，但无需判断Integer溢出"><a href="#PS-与整数反转类似，但无需判断Integer溢出" class="headerlink" title="PS:与整数反转类似，但无需判断Integer溢出"></a>PS:与整数反转类似，但无需判断Integer溢出</h5><h3 id="完"><a href="#完" class="headerlink" title="完!"></a>完!</h3>]]></content>
      <categories>
        <category>回文数</category>
        <category>leetcode</category>
        <category>JAVA</category>
        <category>算法</category>
        <category>简单</category>
      </categories>
      <tags>
        <tag>入门级算法</tag>
        <tag>回文数</tag>
      </tags>
  </entry>
  <entry>
    <title>plus-one</title>
    <url>/2020/09/23/plus-one/</url>
    <content><![CDATA[<h2 id="加一"><a href="#加一" class="headerlink" title="加一"></a>加一</h2><h5 id="给定一个由整数组成的非空数组所表示的非负整数，在该数的基础上加一。"><a href="#给定一个由整数组成的非空数组所表示的非负整数，在该数的基础上加一。" class="headerlink" title="给定一个由整数组成的非空数组所表示的非负整数，在该数的基础上加一。"></a>给定一个由整数组成的非空数组所表示的非负整数，在该数的基础上加一。</h5><h5 id="最高位数字存放在数组的首位，-数组中每个元素只存储单个数字。"><a href="#最高位数字存放在数组的首位，-数组中每个元素只存储单个数字。" class="headerlink" title="最高位数字存放在数组的首位， 数组中每个元素只存储单个数字。"></a>最高位数字存放在数组的首位， 数组中每个元素只存储单个数字。</h5><h5 id="你可以假设除了整数-0-之外，这个整数不会以零开头。"><a href="#你可以假设除了整数-0-之外，这个整数不会以零开头。" class="headerlink" title="你可以假设除了整数 0 之外，这个整数不会以零开头。"></a>你可以假设除了整数 0 之外，这个整数不会以零开头。</h5><h4 id="示例1："><a href="#示例1：" class="headerlink" title="示例1："></a>示例1：</h4><p>输入: [1,2,3]<br>输出: [1,2,4]<br>解释: 输入数组表示数字 123。</p>
<h4 id="示例2："><a href="#示例2：" class="headerlink" title="示例2："></a>示例2：</h4><p>输入: [4,3,2,1]<br>输出: [4,3,2,2]<br>解释: 输入数组表示数字 4321。</p>
<h4 id="我的代码-java"><a href="#我的代码-java" class="headerlink" title="我的代码-java"></a>我的代码-java</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int[] plusOne(int[] digits) &#123;</span><br><span class="line">         <span class="keyword">if</span> (digits.length == 0) &#123;</span><br><span class="line">            <span class="built_in">return</span> new int[1];</span><br><span class="line">        &#125;</span><br><span class="line">        Stack&lt;Integer&gt; stack = new Stack&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        callBack(stack, digits, digits.length - 1, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        int[] nums = new int[stack.size()];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (int i = 0; i &lt; nums.length; i++) &#123;</span><br><span class="line">            nums[i] = stack.pop();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">return</span> nums;</span><br><span class="line">    &#125;</span><br><span class="line">    public void callBack(Stack&lt;Integer&gt; stack,int[] digits,int index,boolean flag)&#123;</span><br><span class="line">         <span class="keyword">if</span> (index &lt; 0) &#123;</span><br><span class="line">            <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">                stack.push(1);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (index == digits.length - 1 &amp;&amp; digits[index] == 9) &#123;</span><br><span class="line">            stack.push(0);</span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (digits[index] == 9 &amp;&amp; flag) &#123;</span><br><span class="line">            stack.push(0);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            stack.push(digits[index] + 1);</span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(index == digits.length - 1)&#123;</span><br><span class="line">            stack.push(digits[index]+1);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            stack.push(digits[index]);</span><br><span class="line">        &#125;</span><br><span class="line">        callBack(stack, digits, index - 1, flag);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="耗时-1ms-空间占用-37-3MB"><a href="#耗时-1ms-空间占用-37-3MB" class="headerlink" title="耗时 1ms 空间占用 37.3MB"></a>耗时 1ms 空间占用 37.3MB</h4><h4 id="大佬的代码–java"><a href="#大佬的代码–java" class="headerlink" title="大佬的代码–java"></a>大佬的代码–java</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int[] plusOne(int[] digits) &#123;</span><br><span class="line">        <span class="keyword">for</span> (int i = digits.length - 1; i &gt;= 0; i--) &#123;</span><br><span class="line">            digits[i]++;</span><br><span class="line">            digits[i] = digits[i] % 10;</span><br><span class="line">            <span class="keyword">if</span> (digits[i] != 0) <span class="built_in">return</span> digits;</span><br><span class="line">        &#125;</span><br><span class="line">        digits = new int[digits.length + 1];</span><br><span class="line">        digits[0] = 1;</span><br><span class="line">        <span class="built_in">return</span> digits;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure>

<h4 id="耗时0ms-空间占用-37-3MB"><a href="#耗时0ms-空间占用-37-3MB" class="headerlink" title="耗时0ms 空间占用 37.3MB"></a>耗时0ms 空间占用 37.3MB</h4><h3 id="完"><a href="#完" class="headerlink" title="完"></a>完</h3>]]></content>
      <categories>
        <category>数组</category>
        <category>算法</category>
        <category>java</category>
        <category>leetcode</category>
        <category>简单</category>
      </categories>
      <tags>
        <tag>简单</tag>
        <tag>算法</tag>
        <tag>java</tag>
        <tag>leetcode</tag>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title>remove-duplicates-from-sorted-array</title>
    <url>/2020/09/15/remove-duplicates-from-sorted-array/</url>
    <content><![CDATA[<h2 id="删除排序数组中的重复项"><a href="#删除排序数组中的重复项" class="headerlink" title="删除排序数组中的重复项"></a>删除排序数组中的重复项</h2><h6 id="给定一个排序数组，你需要在-原地-删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。"><a href="#给定一个排序数组，你需要在-原地-删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。" class="headerlink" title="给定一个排序数组，你需要在 原地 删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。"></a>给定一个排序数组，你需要在 原地 删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。</h6><p>不要使用额外的数组空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。</p>
<h4 id="示例1："><a href="#示例1：" class="headerlink" title="示例1："></a>示例1：</h4><p> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给定数组 nums &#x3D; [1,1,2], </span><br><span class="line"></span><br><span class="line">函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。 </span><br><span class="line"></span><br><span class="line">你不需要考虑数组中超出新长度后面的元素。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="示例2："><a href="#示例2：" class="headerlink" title="示例2："></a>示例2：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给定 nums &#x3D; [0,0,1,1,1,2,2,3,3,4],</span><br><span class="line"></span><br><span class="line">函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。</span><br><span class="line"></span><br><span class="line">你不需要考虑数组中超出新长度后面的元素。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h5><p>为什么返回数值是整数，但输出的答案是数组呢?</p>
<p>请注意，输入数组是以「引用」方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。</p>
<p>你可以想象内部操作如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; nums 是以“引用”方式传递的。也就是说，不对实参做任何拷贝</span><br><span class="line">int len &#x3D; removeDuplicates(nums);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 在函数里修改输入数组对于调用者是可见的。</span><br><span class="line">&#x2F;&#x2F; 根据你的函数返回的长度, 它会打印出数组中该长度范围内的所有元素。</span><br><span class="line">for (int i &#x3D; 0; i &lt; len; i++) &#123;</span><br><span class="line">    print(nums[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="我的代码-JAVA"><a href="#我的代码-JAVA" class="headerlink" title="我的代码-JAVA"></a>我的代码-JAVA</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"> class Solution &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        // TODO Auto-generated method stub</span><br><span class="line">        int[] nums=&#123;&#125;;</span><br><span class="line">        int len = removeDuplicates(nums);</span><br><span class="line">        <span class="keyword">for</span>(int i=0;i&lt;len;i++)&#123;</span><br><span class="line">            System.out.println(nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public static int removeDuplicates(int[] nums) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums.length&lt;1)&#123;</span><br><span class="line">                System.out.println(nums.length);</span><br><span class="line">                <span class="built_in">return</span> 0;</span><br><span class="line">            &#125;</span><br><span class="line">            int count=1;</span><br><span class="line">            int t=nums[0];</span><br><span class="line">            <span class="keyword">for</span>(int i=1;i&lt;nums.length;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(t==nums[i])&#123;</span><br><span class="line">                    <span class="built_in">continue</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    nums[count++]=nums[i];</span><br><span class="line">                    t=nums[i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="耗时-1ms-空间占用41-8MB"><a href="#耗时-1ms-空间占用41-8MB" class="headerlink" title="耗时  1ms 空间占用41.8MB"></a>耗时  1ms 空间占用41.8MB</h4><h3 id="完"><a href="#完" class="headerlink" title="完"></a>完</h3>]]></content>
      <categories>
        <category>java</category>
        <category>入门级算法</category>
        <category>leetcode</category>
        <category>array</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>java</tag>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>remove-duplicates-from-sorted-list</title>
    <url>/2020/09/26/remove-duplicates-from-sorted-list/</url>
    <content><![CDATA[<h2 id="删除排序链表中的重复元素"><a href="#删除排序链表中的重复元素" class="headerlink" title="删除排序链表中的重复元素"></a>删除排序链表中的重复元素</h2><h5 id="给定一个排序链表，删除所有重复的元素，使得每个元素只出现一次。"><a href="#给定一个排序链表，删除所有重复的元素，使得每个元素只出现一次。" class="headerlink" title="给定一个排序链表，删除所有重复的元素，使得每个元素只出现一次。"></a>给定一个排序链表，删除所有重复的元素，使得每个元素只出现一次。</h5><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1:"></a>示例 1:</h4><p>输入: 1-&gt;1-&gt;2<br>输出: 1-&gt;2</p>
<h4 id="示例2："><a href="#示例2：" class="headerlink" title="示例2："></a>示例2：</h4><p>输入: 1-&gt;1-&gt;2-&gt;3-&gt;3<br>输出: 1-&gt;2-&gt;3</p>
<h4 id="我的代码-java"><a href="#我的代码-java" class="headerlink" title="我的代码-java"></a>我的代码-java</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">public class Solution &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        // TODO Auto-generated method stub</span><br><span class="line">        ListNode head=null;</span><br><span class="line">        ListNode listNode=new ListNode(1);</span><br><span class="line">        head=listNode;</span><br><span class="line">        <span class="keyword">for</span>(int i=1;i&lt;5;i++)&#123;</span><br><span class="line">            //新增节点</span><br><span class="line">            ListNode listNode1=new ListNode(1);</span><br><span class="line">            //当前节点的下一节点为 新增节点</span><br><span class="line">            listNode.next=listNode1;</span><br><span class="line">            //将当前节点切换至下一节点</span><br><span class="line">            listNode=listNode.next;</span><br><span class="line">        &#125;</span><br><span class="line">        //正式操作</span><br><span class="line">        head=deleteDuplicates(head);</span><br><span class="line">        <span class="keyword">while</span>(head != null)&#123;</span><br><span class="line">            System.out.println(head.val);</span><br><span class="line">            head=head.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public static ListNode deleteDuplicates(ListNode head) &#123;</span><br><span class="line">        <span class="keyword">if</span>(head ==null)&#123;</span><br><span class="line">            <span class="built_in">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ListNode newHead=new ListNode(head.val);</span><br><span class="line">        ListNode l1=newHead;</span><br><span class="line">        int temp=l1.val;</span><br><span class="line">        <span class="keyword">while</span> (head != null)&#123;</span><br><span class="line">            ListNode l2=head;</span><br><span class="line">            <span class="keyword">if</span>(temp!=l2.val) &#123;</span><br><span class="line">                newHead.next = new ListNode(l2.val);</span><br><span class="line">                newHead=newHead.next;</span><br><span class="line">                temp=l2.val;</span><br><span class="line">            &#125;</span><br><span class="line">            head = head.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> l1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class ListNode &#123;</span><br><span class="line">    int val;</span><br><span class="line">    ListNode next;</span><br><span class="line">    ListNode(int x) &#123; val = x; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="耗时1ms-空间占用38-7MB"><a href="#耗时1ms-空间占用38-7MB" class="headerlink" title="耗时1ms 空间占用38.7MB"></a>耗时1ms 空间占用38.7MB</h4><h4 id="官方代码-java"><a href="#官方代码-java" class="headerlink" title="官方代码-java"></a>官方代码-java</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">public ListNode deleteDuplicates(ListNode head) &#123;</span><br><span class="line">    ListNode current = head;</span><br><span class="line">    <span class="keyword">while</span> (current != null &amp;&amp; current.next != null) &#123;</span><br><span class="line">        <span class="keyword">if</span> (current.next.val == current.val) &#123;</span><br><span class="line">            current.next = current.next.next;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            current = current.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="java没有指针，哪来的野指针。GC回收机制"><a href="#java没有指针，哪来的野指针。GC回收机制" class="headerlink" title="java没有指针，哪来的野指针。GC回收机制"></a>java没有指针，哪来的野指针。GC回收机制</h3><h4 id="完"><a href="#完" class="headerlink" title="完"></a>完</h4>]]></content>
      <categories>
        <category>链表</category>
        <category>java</category>
        <category>算法</category>
        <category>简单</category>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>简单</tag>
        <tag>算法</tag>
        <tag>java</tag>
        <tag>leetcode</tag>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title>remove-element</title>
    <url>/2020/09/15/remove-element/</url>
    <content><![CDATA[<h2 id="移除元素"><a href="#移除元素" class="headerlink" title="移除元素"></a>移除元素</h2><h5 id="给你一个数组-nums-和一个值-val，你需要-原地-移除所有数值等于-val-的元素，并返回移除后数组的新长度。"><a href="#给你一个数组-nums-和一个值-val，你需要-原地-移除所有数值等于-val-的元素，并返回移除后数组的新长度。" class="headerlink" title="给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。"></a>给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。</h5><p>不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。</p>
<p>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p>
<h5 id="示例1："><a href="#示例1：" class="headerlink" title="示例1："></a>示例1：</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给定 nums &#x3D; [3,2,2,3], val &#x3D; 3,</span><br><span class="line"></span><br><span class="line">函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。</span><br><span class="line"></span><br><span class="line">你不需要考虑数组中超出新长度后面的元素。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="示例2："><a href="#示例2：" class="headerlink" title="示例2："></a>示例2：</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给定 nums &#x3D; [0,1,2,2,3,0,4,2], val &#x3D; 2,</span><br><span class="line"></span><br><span class="line">函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。</span><br><span class="line"></span><br><span class="line">注意这五个元素可为任意顺序。</span><br><span class="line"></span><br><span class="line">你不需要考虑数组中超出新长度后面的元素。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="说明-与之前生成新数组类似"><a href="#说明-与之前生成新数组类似" class="headerlink" title="说明 与之前生成新数组类似"></a>说明 与之前生成新数组类似</h5><h4 id="我的代码-JAVA"><a href="#我的代码-JAVA" class="headerlink" title="我的代码-JAVA"></a>我的代码-JAVA</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int removeElement(int[] nums, int val) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums.length&lt;1)&#123;</span><br><span class="line">                System.out.println(nums.length);</span><br><span class="line">                <span class="built_in">return</span> 0;</span><br><span class="line">            &#125;</span><br><span class="line">            int count=0;</span><br><span class="line">            <span class="keyword">for</span>(int i=0;i&lt;nums.length;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(val==nums[i])&#123;</span><br><span class="line">                    <span class="built_in">continue</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    nums[count++]=nums[i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">             <span class="built_in">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="耗时-0ms-空间占用-38-4-MB"><a href="#耗时-0ms-空间占用-38-4-MB" class="headerlink" title="耗时 0ms 空间占用 38.4 MB"></a>耗时 0ms 空间占用 38.4 MB</h4><h4 id="完"><a href="#完" class="headerlink" title="完"></a>完</h4>]]></content>
      <categories>
        <category>leetcode</category>
        <category>java</category>
        <category>算法</category>
        <category>array</category>
        <category>数组</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>java</tag>
        <tag>leetcode</tag>
        <tag>array</tag>
      </tags>
  </entry>
  <entry>
    <title>reverse-integer</title>
    <url>/2020/09/11/reverse-integer/</url>
    <content><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。</p>
<h5 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h5><p>输入: 123<br>输出: 321</p>
<h5 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h5><p>输入: -123<br>输出: -321</p>
<h5 id="示例3"><a href="#示例3" class="headerlink" title="示例3"></a>示例3</h5><p>输入: 120<br>输出: 21</p>
<h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><p>假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−231,  231 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。</p>
<h5 id="我的代码–JAVA"><a href="#我的代码–JAVA" class="headerlink" title="我的代码–JAVA"></a>我的代码–JAVA</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int reverse(int x) &#123;</span><br><span class="line">   Long n=0L;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(x!=0)&#123;</span><br><span class="line">            n=n*10+x%10;</span><br><span class="line">            x=x/10;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(n &lt; Integer.MIN_VALUE || n&gt;Integer.MAX_VALUE)&#123;</span><br><span class="line">            <span class="built_in">return</span> 0;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(n);</span><br><span class="line">        <span class="built_in">return</span> n.intValue();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>耗时 7ms 内存消耗 37.3MB</p>
<h2 id="完"><a href="#完" class="headerlink" title="完!"></a>完!</h2>]]></content>
      <categories>
        <category>JAVA</category>
        <category>算法</category>
        <category>简单</category>
        <category>Integer</category>
      </categories>
      <tags>
        <tag>简单</tag>
        <tag>算法</tag>
        <tag>integer</tag>
      </tags>
  </entry>
  <entry>
    <title>roman-to-integer</title>
    <url>/2020/09/11/roman-to-integer/</url>
    <content><![CDATA[<h2 id="罗马数字转整数"><a href="#罗马数字转整数" class="headerlink" title="罗马数字转整数"></a>罗马数字转整数</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>罗马数字包含以下七种字符: I， V， X， L，C，D 和 M。</p>
<p>字符          数值<br>I             1<br>V             5<br>X             10<br>L             50<br>C             100<br>D             500<br>M             1000</p>
<p>例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即为 X + II 。 27 写做  XXVII, 即为 XX + V + II 。</p>
<p>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：</p>
<p>I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。<br>X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。 <br>C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。<br>给定一个罗马数字，将其转换成整数。输入确保在 1 到 3999 的范围内</p>
<h5 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1:"></a>示例 1:</h5><p>输入: “III”<br>输出: 3</p>
<h5 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2:"></a>示例 2:</h5><p>输入: “IV”<br>输出: 4</p>
<h5 id="示例-3"><a href="#示例-3" class="headerlink" title="示例 3:"></a>示例 3:</h5><p>输入: “IX”<br>输出: 9</p>
<h5 id="示例-4"><a href="#示例-4" class="headerlink" title="示例 4:"></a>示例 4:</h5><p>输入: “LVIII”<br>输出: 58<br>解释: L = 50, V= 5, III = 3.</p>
<h5 id="示例-5"><a href="#示例-5" class="headerlink" title="示例 5:"></a>示例 5:</h5><p>输入: “MCMXCIV”<br>输出: 1994<br>解释: M = 1000, CM = 900, XC = 90, IV = 4.</p>
<h3 id="我的代码–JAVA"><a href="#我的代码–JAVA" class="headerlink" title="我的代码–JAVA"></a>我的代码–JAVA</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int romanToInt(String s) &#123;</span><br><span class="line">        Map&lt;String,Integer&gt; map=new HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;I&quot;</span>,1);</span><br><span class="line">        map.put(<span class="string">&quot;V&quot;</span>,5);</span><br><span class="line">        map.put(<span class="string">&quot;X&quot;</span>,10);</span><br><span class="line">        map.put(<span class="string">&quot;L&quot;</span>,50);</span><br><span class="line">        map.put(<span class="string">&quot;C&quot;</span>,100);</span><br><span class="line">        map.put(<span class="string">&quot;D&quot;</span>,500);</span><br><span class="line">        map.put(<span class="string">&quot;M&quot;</span>,1000);</span><br><span class="line">        int sum=0;</span><br><span class="line">        <span class="keyword">for</span>(int i=s.length()-1;i&gt;-1;i--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i==0)&#123;</span><br><span class="line">                sum=sum+map.get(s.charAt(i)+<span class="string">&quot;&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">               int m= map.get(s.charAt(i)+<span class="string">&quot;&quot;</span>);</span><br><span class="line">               int n=map.get(s.charAt(i-1)+<span class="string">&quot;&quot;</span>);</span><br><span class="line">               <span class="keyword">if</span>(m&gt;n)&#123;</span><br><span class="line">                   i--;</span><br><span class="line">                   sum=sum+m-n;</span><br><span class="line">               &#125;<span class="keyword">else</span>  &#123;</span><br><span class="line"></span><br><span class="line">                   sum=sum+m;</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span>  sum;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>耗时 14ms 内存消耗 40.4MB</p>
<h2 id="完-没看见精简高效的，虽然我这也不高效"><a href="#完-没看见精简高效的，虽然我这也不高效" class="headerlink" title="完! 没看见精简高效的，虽然我这也不高效. - -!"></a>完! 没看见精简高效的，虽然我这也不高效. - -!</h2>]]></content>
      <categories>
        <category>罗马数字转整数</category>
        <category>JAVA</category>
        <category>leetcode</category>
        <category>简单</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>入门级算法</tag>
        <tag>integer</tag>
      </tags>
  </entry>
  <entry>
    <title>same-tree</title>
    <url>/2020/09/27/same-tree/</url>
    <content><![CDATA[<h2 id="相同的数"><a href="#相同的数" class="headerlink" title="相同的数"></a>相同的数</h2><h4 id="给定两个二叉树，编写一个函数来检验它们是否相同。"><a href="#给定两个二叉树，编写一个函数来检验它们是否相同。" class="headerlink" title="给定两个二叉树，编写一个函数来检验它们是否相同。"></a>给定两个二叉树，编写一个函数来检验它们是否相同。</h4><h4 id="如果两个树在结构上相同，并且节点具有相同的值，则认为它们是相同的。"><a href="#如果两个树在结构上相同，并且节点具有相同的值，则认为它们是相同的。" class="headerlink" title="如果两个树在结构上相同，并且节点具有相同的值，则认为它们是相同的。"></a>如果两个树在结构上相同，并且节点具有相同的值，则认为它们是相同的。</h4><h4 id="示例1："><a href="#示例1：" class="headerlink" title="示例1："></a>示例1：</h4><p>输入:       1         1<br>          / \       / <br>         2   3     2   3</p>
<pre><code>    [1,2,3],   [1,2,3]</code></pre>
<p>输出: true</p>
<h4 id="示例2："><a href="#示例2：" class="headerlink" title="示例2："></a>示例2：</h4><p>输入:      1          1<br>          /           <br>         2             2</p>
<pre><code>    [1,2],     [1,null,2]</code></pre>
<p>输出: false</p>
<h4 id="示例3："><a href="#示例3：" class="headerlink" title="示例3："></a>示例3：</h4><p>输入:       1         1<br>          / \       / <br>         2   1     1   2</p>
<pre><code>    [1,2,1],   [1,1,2]</code></pre>
<p>输出: false</p>
<h4 id="我的代码-java-递归-深度优先搜索"><a href="#我的代码-java-递归-深度优先搜索" class="headerlink" title="我的代码-java-递归-深度优先搜索"></a>我的代码-java-递归-深度优先搜索</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Definition <span class="keyword">for</span> a binary tree node.</span><br><span class="line"> * public class TreeNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     TreeNode left;</span><br><span class="line"> *     TreeNode right;</span><br><span class="line"> *     <span class="function"><span class="title">TreeNode</span></span>() &#123;&#125;</span><br><span class="line"> *     TreeNode(int val) &#123; this.val = val; &#125;</span><br><span class="line"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span><br><span class="line"> *         this.val = val;</span><br><span class="line"> *         this.left = left;</span><br><span class="line"> *         this.right = right;</span><br><span class="line"> *     &#125;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span><br><span class="line">class Solution &#123;</span><br><span class="line">    public boolean isSameTree(TreeNode p, TreeNode q) &#123;</span><br><span class="line">            <span class="keyword">if</span>(p == null &amp;&amp; q == null)&#123;</span><br><span class="line">                <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(p == null &amp;&amp; q != null)&#123;</span><br><span class="line">                <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(q == null &amp;&amp; p  != null)&#123;</span><br><span class="line">                <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(p.val==q.val)&#123;</span><br><span class="line">                  <span class="built_in">return</span>  isSameTree(p.left,q.left)&amp;&amp;isSameTree(p.right,q.right);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-耗时0ms-空间占用36-5MB"><a href="#结果-耗时0ms-空间占用36-5MB" class="headerlink" title="结果 耗时0ms 空间占用36.5MB"></a>结果 耗时0ms 空间占用36.5MB</h3><h5 id="题解，先输出-先序-中序、后序-输出完自己就知道了。"><a href="#题解，先输出-先序-中序、后序-输出完自己就知道了。" class="headerlink" title="题解，先输出 先序 中序、后序 输出完自己就知道了。"></a>题解，先输出 先序 中序、后序 输出完自己就知道了。</h5><h4 id="官方代码-java-广度优先搜索"><a href="#官方代码-java-广度优先搜索" class="headerlink" title="官方代码-java-广度优先搜索"></a>官方代码-java-广度优先搜索</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public boolean isSameTree(TreeNode p, TreeNode q) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p == null &amp;&amp; q == null) &#123;</span><br><span class="line">            <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p == null || q == null) &#123;</span><br><span class="line">            <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Queue&lt;TreeNode&gt; queue1 = new LinkedList&lt;TreeNode&gt;();</span><br><span class="line">        Queue&lt;TreeNode&gt; queue2 = new LinkedList&lt;TreeNode&gt;();</span><br><span class="line">        queue1.offer(p);</span><br><span class="line">        queue2.offer(q);</span><br><span class="line">        <span class="keyword">while</span> (!queue1.isEmpty() &amp;&amp; !queue2.isEmpty()) &#123;</span><br><span class="line">            TreeNode node1 = queue1.poll();</span><br><span class="line">            TreeNode node2 = queue2.poll();</span><br><span class="line">            <span class="keyword">if</span> (node1.val != node2.val) &#123;</span><br><span class="line">                <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            TreeNode left1 = node1.left, right1 = node1.right, left2 = node2.left, right2 = node2.right;</span><br><span class="line">            <span class="keyword">if</span> (left1 == null ^ left2 == null) &#123;</span><br><span class="line">                <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (right1 == null ^ right2 == null) &#123;</span><br><span class="line">                <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (left1 != null) &#123;</span><br><span class="line">                queue1.offer(left1);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (right1 != null) &#123;</span><br><span class="line">                queue1.offer(right1);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (left2 != null) &#123;</span><br><span class="line">                queue2.offer(left2);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (right2 != null) &#123;</span><br><span class="line">                queue2.offer(right2);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> queue1.isEmpty() &amp;&amp; queue2.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="题解也可以通过广度优先搜索判断两个二叉树是否相同。同样首先判断两个二叉树是否为空，如果两个二叉树都不为空，则从两个二叉树的根节点开始广度优先搜索。"><a href="#题解也可以通过广度优先搜索判断两个二叉树是否相同。同样首先判断两个二叉树是否为空，如果两个二叉树都不为空，则从两个二叉树的根节点开始广度优先搜索。" class="headerlink" title="题解也可以通过广度优先搜索判断两个二叉树是否相同。同样首先判断两个二叉树是否为空，如果两个二叉树都不为空，则从两个二叉树的根节点开始广度优先搜索。"></a>题解也可以通过广度优先搜索判断两个二叉树是否相同。同样首先判断两个二叉树是否为空，如果两个二叉树都不为空，则从两个二叉树的根节点开始广度优先搜索。</h5><h5 id="使用两个队列分别存储两个二叉树的节点。初始时将两个二叉树的根节点分别加入两个队列。每次从两个队列各取出一个节点，进行如下比较操作。"><a href="#使用两个队列分别存储两个二叉树的节点。初始时将两个二叉树的根节点分别加入两个队列。每次从两个队列各取出一个节点，进行如下比较操作。" class="headerlink" title="使用两个队列分别存储两个二叉树的节点。初始时将两个二叉树的根节点分别加入两个队列。每次从两个队列各取出一个节点，进行如下比较操作。"></a>使用两个队列分别存储两个二叉树的节点。初始时将两个二叉树的根节点分别加入两个队列。每次从两个队列各取出一个节点，进行如下比较操作。</h5><h5 id="比较两个节点的值，如果两个节点的值不相同则两个二叉树一定不同；"><a href="#比较两个节点的值，如果两个节点的值不相同则两个二叉树一定不同；" class="headerlink" title="比较两个节点的值，如果两个节点的值不相同则两个二叉树一定不同；"></a>比较两个节点的值，如果两个节点的值不相同则两个二叉树一定不同；</h5><h5 id="如果两个节点的值相同，则判断两个节点的子节点是否为空，如果只有一个节点的左子节点为空，或者只有一个节点的右子节点为空，则两个二叉树的结构不同，因此两个二叉树一定不同；"><a href="#如果两个节点的值相同，则判断两个节点的子节点是否为空，如果只有一个节点的左子节点为空，或者只有一个节点的右子节点为空，则两个二叉树的结构不同，因此两个二叉树一定不同；" class="headerlink" title="如果两个节点的值相同，则判断两个节点的子节点是否为空，如果只有一个节点的左子节点为空，或者只有一个节点的右子节点为空，则两个二叉树的结构不同，因此两个二叉树一定不同；"></a>如果两个节点的值相同，则判断两个节点的子节点是否为空，如果只有一个节点的左子节点为空，或者只有一个节点的右子节点为空，则两个二叉树的结构不同，因此两个二叉树一定不同；</h5><h5 id="如果两个节点的子节点的结构相同，则将两个节点的非空子节点分别加入两个队列，子节点加入队列时需要注意顺序，如果左右子节点都不为空，则先加入左子节点，后加入右子节点。"><a href="#如果两个节点的子节点的结构相同，则将两个节点的非空子节点分别加入两个队列，子节点加入队列时需要注意顺序，如果左右子节点都不为空，则先加入左子节点，后加入右子节点。" class="headerlink" title="如果两个节点的子节点的结构相同，则将两个节点的非空子节点分别加入两个队列，子节点加入队列时需要注意顺序，如果左右子节点都不为空，则先加入左子节点，后加入右子节点。"></a>如果两个节点的子节点的结构相同，则将两个节点的非空子节点分别加入两个队列，子节点加入队列时需要注意顺序，如果左右子节点都不为空，则先加入左子节点，后加入右子节点。</h5><h5 id="如果搜索结束时两个队列同时为空，则两个二叉树相同。如果只有一个队列为空，则两个二叉树的结构不同，因此两个二叉树不同。"><a href="#如果搜索结束时两个队列同时为空，则两个二叉树相同。如果只有一个队列为空，则两个二叉树的结构不同，因此两个二叉树不同。" class="headerlink" title="如果搜索结束时两个队列同时为空，则两个二叉树相同。如果只有一个队列为空，则两个二叉树的结构不同，因此两个二叉树不同。"></a>如果搜索结束时两个队列同时为空，则两个二叉树相同。如果只有一个队列为空，则两个二叉树的结构不同，因此两个二叉树不同。</h5><h3 id="完"><a href="#完" class="headerlink" title="完"></a>完</h3>]]></content>
      <categories>
        <category>数据结构</category>
        <category>二叉树</category>
        <category>算法</category>
        <category>leetcode</category>
        <category>java</category>
        <category>DFS</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>java</tag>
        <tag>leetcode</tag>
        <tag>数据结构</tag>
        <tag>二叉树</tag>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title>search-insert-position</title>
    <url>/2020/09/16/search-insert-position/</url>
    <content><![CDATA[<h2 id="搜索插入位置"><a href="#搜索插入位置" class="headerlink" title="搜索插入位置"></a>搜索插入位置</h2><h5 id="给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。"><a href="#给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。" class="headerlink" title="给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。"></a>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</h5><h5 id="你可以假设数组中无重复元素。"><a href="#你可以假设数组中无重复元素。" class="headerlink" title="你可以假设数组中无重复元素。"></a>你可以假设数组中无重复元素。</h5><h4 id="示例1："><a href="#示例1：" class="headerlink" title="示例1："></a>示例1：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [1,3,5,6], 5</span><br><span class="line">输出: 2</span><br></pre></td></tr></table></figure>

<h4 id="示例2："><a href="#示例2：" class="headerlink" title="示例2："></a>示例2：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [1,3,5,6], 2</span><br><span class="line">输出: 1</span><br></pre></td></tr></table></figure>

<h4 id="示例3："><a href="#示例3：" class="headerlink" title="示例3："></a>示例3：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [1,3,5,6], 7</span><br><span class="line">输出: 4</span><br></pre></td></tr></table></figure>

<h4 id="示例4："><a href="#示例4：" class="headerlink" title="示例4："></a>示例4：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [1,3,5,6], 0</span><br><span class="line">输出: 0</span><br></pre></td></tr></table></figure>

<h5 id="我的代码-JAVA-暴力破解"><a href="#我的代码-JAVA-暴力破解" class="headerlink" title="我的代码-JAVA-暴力破解"></a>我的代码-JAVA-暴力破解</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int searchInsert(int[] nums, int target) &#123;</span><br><span class="line">        <span class="keyword">for</span>(int i=0;i&lt;nums.length;i++)&#123;</span><br><span class="line">           <span class="keyword">if</span>(nums[i]&gt;=target)&#123;</span><br><span class="line">               <span class="built_in">return</span> i;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">        <span class="built_in">return</span> nums.length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="耗时-0ms-空间占用-38-9MB"><a href="#耗时-0ms-空间占用-38-9MB" class="headerlink" title="耗时 0ms 空间占用 38.9MB"></a>耗时 0ms 空间占用 38.9MB</h4><h5 id="我的代码-JAVA-二分查找"><a href="#我的代码-JAVA-二分查找" class="headerlink" title="我的代码-JAVA-二分查找"></a>我的代码-JAVA-二分查找</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int searchInsert(int[] nums, int target) &#123;</span><br><span class="line">        int left=0;</span><br><span class="line">        int right=nums.length-1;</span><br><span class="line">        int ans=nums.length;</span><br><span class="line">        <span class="keyword">while</span>(left&lt;=right)&#123;</span><br><span class="line">            int mid=(right+left)/2;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid]&gt;=target)&#123;</span><br><span class="line">                ans=mid;</span><br><span class="line">                right=mid-1;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                left=mid+1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="耗时-0ms-空间占用-38-7MB"><a href="#耗时-0ms-空间占用-38-7MB" class="headerlink" title="耗时 0ms 空间占用 38.7MB"></a>耗时 0ms 空间占用 38.7MB</h4><h3 id="完。"><a href="#完。" class="headerlink" title="完。"></a>完。</h3>]]></content>
      <categories>
        <category>java</category>
        <category>算法</category>
        <category>数组</category>
        <category>leetcode</category>
        <category>简单</category>
        <category>二分查找</category>
      </categories>
      <tags>
        <tag>简单</tag>
        <tag>算法</tag>
        <tag>java</tag>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>second-highest-salary</title>
    <url>/2020/09/11/second-highest-salary/</url>
    <content><![CDATA[<h2 id="第二高的薪水"><a href="#第二高的薪水" class="headerlink" title="第二高的薪水"></a>第二高的薪水</h2><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><h5 id="编写一个-SQL-查询，获取-Employee-表中第二高的薪水（Salary）-。"><a href="#编写一个-SQL-查询，获取-Employee-表中第二高的薪水（Salary）-。" class="headerlink" title="编写一个 SQL 查询，获取 Employee 表中第二高的薪水（Salary） 。"></a>编写一个 SQL 查询，获取 Employee 表中第二高的薪水（Salary） 。</h5><p>+—-+——–+<br>| Id | Salary |<br>+—-+——–+<br>| 1  | 100    |<br>| 2  | 200    |<br>| 3  | 300    |<br>+—-+——–+</p>
<h5 id="例如上述-Employee-表，SQL查询应该返回-200-作为第二高的薪水。如果不存在第二高的薪水，那么查询应返回-null。"><a href="#例如上述-Employee-表，SQL查询应该返回-200-作为第二高的薪水。如果不存在第二高的薪水，那么查询应返回-null。" class="headerlink" title="例如上述 Employee 表，SQL查询应该返回 200 作为第二高的薪水。如果不存在第二高的薪水，那么查询应返回 null。"></a>例如上述 Employee 表，SQL查询应该返回 200 作为第二高的薪水。如果不存在第二高的薪水，那么查询应返回 null。</h5><p>+———————+<br>| SecondHighestSalary |<br>+———————+<br>| 200                 |<br>+———————+</p>
<h3 id="我的代码–MySQL"><a href="#我的代码–MySQL" class="headerlink" title="我的代码–MySQL"></a>我的代码–MySQL</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Write your MySQL query statement below</span></span><br><span class="line"></span><br><span class="line">select (select DISTINCT Salary from Employee  order by Salary desc  <span class="built_in">limit</span> 1,1)as SecondHighestSalary</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="说明：内部select查询所有记录，DISTINCT-去掉重复记录，降序排序后，通过limit-1-1-从第二条记录开始，取一条出来。外部select-则是用来根据题目要返回null-查询为-null-时-就是null，不加就没有。"><a href="#说明：内部select查询所有记录，DISTINCT-去掉重复记录，降序排序后，通过limit-1-1-从第二条记录开始，取一条出来。外部select-则是用来根据题目要返回null-查询为-null-时-就是null，不加就没有。" class="headerlink" title="说明：内部select查询所有记录，DISTINCT 去掉重复记录，降序排序后，通过limit 1,1 从第二条记录开始，取一条出来。外部select 则是用来根据题目要返回null 查询为(null)时 就是null，不加就没有。"></a>说明：内部select查询所有记录，DISTINCT 去掉重复记录，降序排序后，通过limit 1,1 从第二条记录开始，取一条出来。外部select 则是用来根据题目要返回null 查询为(null)时 就是null，不加就没有。</h4><h3 id="完！"><a href="#完！" class="headerlink" title="完！"></a>完！</h3>]]></content>
      <categories>
        <category>SQL</category>
        <category>算法</category>
        <category>简单</category>
        <category>查询</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>入门级算法</tag>
        <tag>入门级SQL</tag>
        <tag>SELECT</tag>
      </tags>
  </entry>
  <entry>
    <title>sqrtx</title>
    <url>/2020/09/25/sqrtx/</url>
    <content><![CDATA[<h2 id="x-的平方根"><a href="#x-的平方根" class="headerlink" title="x 的平方根"></a>x 的平方根</h2><h4 id="实现-int-sqrt-int-x-函数。"><a href="#实现-int-sqrt-int-x-函数。" class="headerlink" title="实现 int sqrt(int x) 函数。"></a>实现 int sqrt(int x) 函数。</h4><h4 id="计算并返回-x-的平方根，其中-x-是非负整数。"><a href="#计算并返回-x-的平方根，其中-x-是非负整数。" class="headerlink" title="计算并返回 x 的平方根，其中 x 是非负整数。"></a>计算并返回 x 的平方根，其中 x 是非负整数。</h4><h4 id="由于返回类型是整数，结果只保留整数的部分，小数部分将被舍去。"><a href="#由于返回类型是整数，结果只保留整数的部分，小数部分将被舍去。" class="headerlink" title="由于返回类型是整数，结果只保留整数的部分，小数部分将被舍去。"></a>由于返回类型是整数，结果只保留整数的部分，小数部分将被舍去。</h4><h4 id="示例1："><a href="#示例1：" class="headerlink" title="示例1："></a>示例1：</h4><p>输入: 4<br>输出: 2</p>
<h4 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h4><p>输入: 8<br>输出: 2<br>说明: 8 的平方根是 2.82842…,<br>     由于返回类型是整数，小数部分将被舍去。</p>
<h4 id="我的代码-java-二分查找"><a href="#我的代码-java-二分查找" class="headerlink" title="我的代码-java-二分查找"></a>我的代码-java-二分查找</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int mySqrt(int x) &#123;</span><br><span class="line">        int left=1;</span><br><span class="line">            int right=x/2&gt;0?x/2:1;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>((long)left*left&gt;x)&#123;</span><br><span class="line">                    <span class="built_in">return</span> left-1;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>((long)right*right&gt;x)&#123;</span><br><span class="line">                    right=right/2;</span><br><span class="line">                &#125;</span><br><span class="line">		//可删除下面的<span class="keyword">if</span> 没啥用 还增加了十多毫秒</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(left&gt;right)&#123;</span><br><span class="line">                    right++;</span><br><span class="line">                &#125;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="结果-加上最后的if-耗时-50ms，空间占用-36-2MB。不加最后if，耗时37ms，空间占用-36-1MB"><a href="#结果-加上最后的if-耗时-50ms，空间占用-36-2MB。不加最后if，耗时37ms，空间占用-36-1MB" class="headerlink" title="结果 加上最后的if 耗时 50ms，空间占用 36.2MB。不加最后if，耗时37ms，空间占用 36.1MB"></a>结果 加上最后的if 耗时 50ms，空间占用 36.2MB。不加最后if，耗时37ms，空间占用 36.1MB</h4><h4 id="官方代码-java-二分查找"><a href="#官方代码-java-二分查找" class="headerlink" title="官方代码-java-二分查找"></a>官方代码-java-二分查找</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int mySqrt(int x) &#123;</span><br><span class="line">	int l = 0, r = x, ans = -1;</span><br><span class="line">        <span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line">            int mid = l + (r - l) / 2;</span><br><span class="line">            <span class="keyword">if</span> ((long) mid * mid &lt;= x) &#123;</span><br><span class="line">                ans = mid;</span><br><span class="line">                l = mid + 1;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                r = mid - 1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> ans;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="结果-耗时-2ms-空间占用36-MB"><a href="#结果-耗时-2ms-空间占用36-MB" class="headerlink" title="结果 耗时 2ms 空间占用36.MB"></a>结果 耗时 2ms 空间占用36.MB</h4><h3 id="思路-："><a href="#思路-：" class="headerlink" title="思路 ："></a>思路 ：</h3><p>由于 xx 平方根的整数部分 \textit{ans}ans 是满足 k^2 \leq xk<br>2<br> ≤x 的最大 kk 值，因此我们可以对 kk 进行二分查找，从而得到答案。</p>
<p>二分查找的下界为 00，上界可以粗略地设定为 xx。在二分查找的每一步中，我们只需要比较中间元素 \textit{mid}mid 的平方与 xx 的大小关系，并通过比较的结果调整上下界的范围。由于我们所有的运算都是整数运算，不会存在误差，因此在得到最终的答案 \textit{ans}ans 后，也就不需要再去尝试 \textit{ans} + 1ans+1 了。</p>
<h3 id="完"><a href="#完" class="headerlink" title="完"></a>完</h3>]]></content>
      <categories>
        <category>java</category>
        <category>算法</category>
        <category>leetcode</category>
        <category>二分查找</category>
        <category>数学</category>
        <category>简单</category>
      </categories>
      <tags>
        <tag>简单</tag>
        <tag>算法</tag>
        <tag>数学</tag>
        <tag>java</tag>
        <tag>leetcode</tag>
        <tag>二分查找</tag>
      </tags>
  </entry>
  <entry>
    <title>valid-parentheses</title>
    <url>/2020/09/11/valid-parentheses/</url>
    <content><![CDATA[<h2 id="有效的括号"><a href="#有效的括号" class="headerlink" title="有效的括号"></a>有效的括号</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串，判断字符串是否有效。</p>
<p>有效字符串需满足：</p>
<p>左括号必须用相同类型的右括号闭合。<br>左括号必须以正确的顺序闭合。<br>注意空字符串可被认为是有效字符串。</p>
<h5 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1:"></a>示例 1:</h5><p>输入: “()”<br>输出: true</p>
<h5 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2:"></a>示例 2:</h5><p>输入: “()[]{}”<br>输出: true</p>
<h5 id="示例-3"><a href="#示例-3" class="headerlink" title="示例 3:"></a>示例 3:</h5><p>输入: “(]”<br>输出: false</p>
<h5 id="示例-4"><a href="#示例-4" class="headerlink" title="示例 4:"></a>示例 4:</h5><p>输入: “([)]”<br>输出: false</p>
<h5 id="示例-5"><a href="#示例-5" class="headerlink" title="示例 5:"></a>示例 5:</h5><p>输入: “{[]}”<br>输出: true</p>
<h3 id="我的代码–JAVA"><a href="#我的代码–JAVA" class="headerlink" title="我的代码–JAVA"></a>我的代码–JAVA</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public boolean isValid(String s) &#123;</span><br><span class="line">        <span class="keyword">if</span>(s.length()&gt;0)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s.length() % 2 ==1)&#123;</span><br><span class="line">                <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Stack&lt;Character&gt; stack=new Stack&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(int i=0;i&lt;s.length();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s.charAt(i)==<span class="string">&#x27;(&#x27;</span>)&#123;</span><br><span class="line">                stack.push(s.charAt(i));</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(s.charAt(i)==<span class="string">&#x27;)&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(stack.size()&gt;0 &amp;&amp; stack.pop()==<span class="string">&#x27;(&#x27;</span>)&#123;</span><br><span class="line">                    <span class="built_in">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(s.charAt(i)==<span class="string">&#x27;&#123;&#x27;</span>)&#123;</span><br><span class="line">                stack.push(s.charAt(i));</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(s.charAt(i)==<span class="string">&#x27;&#125;&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(stack.size()&gt;0 &amp;&amp; stack.pop()==<span class="string">&#x27;&#123;&#x27;</span>)&#123;</span><br><span class="line">                    <span class="built_in">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(s.charAt(i)==<span class="string">&#x27;[&#x27;</span>)&#123;</span><br><span class="line">                stack.push(s.charAt(i));</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(s.charAt(i)==<span class="string">&#x27;]&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(stack.size()&gt;0 &amp;&amp; stack.pop()==<span class="string">&#x27;[&#x27;</span>)&#123;</span><br><span class="line">                    <span class="built_in">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(stack.size()&gt;0)&#123;</span><br><span class="line">            <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>耗时 2ms 内存消耗 37.9MB</p>
<h3 id="完"><a href="#完" class="headerlink" title="完!"></a>完!</h3>]]></content>
      <categories>
        <category>JAVA</category>
        <category>leetcode</category>
        <category>算法</category>
        <category>简单</category>
        <category>栈</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>入门级算法</tag>
        <tag>栈</tag>
      </tags>
  </entry>
</search>
